{
	"info": {
		"_postman_id": "195c515f-5023-40bd-9ce7-9b9087105bad",
		"name": "Proyek SOA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "u3",
									"type": "text"
								},
								{
									"key": "password",
									"value": "2",
									"type": "text"
								},
								{
									"key": "name",
									"value": "n2",
									"type": "text"
								},
								{
									"key": "phone_number",
									"value": "2",
									"type": "text"
								},
								{
									"key": "profile_picture",
									"type": "file",
									"src": "/C:/Users/Vincent/Pictures/detective pikachu.png"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "u10",
									"type": "text"
								},
								{
									"key": "password",
									"value": "10",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxMCIsInBhc3N3b3JkIjoiMTAiLCJuYW1lIjoibjEwIiwicGhvbmVfbnVtYmVyIjoiMTAxMCIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTEwMjU4ODEzNjguSlBHIiwiaWF0IjoxNTkxNTk2NTAyfQ.6mZP0Wm37El1bHBPE68xXgU94JY5Ue87W9VvSJQnF48",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "password",
									"value": "10",
									"type": "text"
								},
								{
									"key": "name",
									"value": "n10",
									"type": "text"
								},
								{
									"key": "phone_number",
									"value": "1010",
									"type": "text"
								},
								{
									"key": "profile_picture",
									"type": "file",
									"src": "/C:/Users/Vincent/Pictures/detective pikachu.png"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user/updateUser/u10",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"updateUser",
								"u10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/u3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"u3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upgrade User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/upgrade",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"upgrade"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user/u",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"u"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Book",
			"item": [
				{
					"name": "Get Book Detail by Id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjEiLCJpYXQiOjE1OTA0NDQ3MjF9.uAOWHNNJ9rc7pAx-AQIqS4gdaAmAiMCq_YOeEmSP5EQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/search/id/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"search",
								"id",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Book by Query",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjEiLCJpYXQiOjE1OTA0NDQ3MjF9.uAOWHNNJ9rc7pAx-AQIqS4gdaAmAiMCq_YOeEmSP5EQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/search/?query=harry&page=2",
							"host": [
								"{{url}}"
							],
							"path": [
								"search",
								""
							],
							"query": [
								{
									"key": "query",
									"value": "harry"
								},
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Review",
			"item": [
				{
					"name": "Create Review",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rating",
									"value": "1",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "Bad",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/review/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Review",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/review/",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								""
							],
							"query": [
								{
									"key": "id_book",
									"value": "2",
									"disabled": true
								},
								{
									"key": "username",
									"value": "u2",
									"disabled": true
								},
								{
									"key": "rating",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Review",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rating",
									"value": "5",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "WOw!",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/review/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Review",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/review/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bookmark",
			"item": [
				{
					"name": "Create Bookmark",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjEiLCJpYXQiOjE1OTA0NDkyNTJ9.mqPS3J90RZlb1ptsxaDwtPRpU5VNFj7mvCQxGjBpxUQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "page_number",
									"value": "3",
									"type": "text"
								},
								{
									"key": "note",
									"value": "notes",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookmark/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bookmark",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjEiLCJpYXQiOjE1OTA0NDkyNTJ9.mqPS3J90RZlb1ptsxaDwtPRpU5VNFj7mvCQxGjBpxUQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/bookmark/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Bookmark",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjEiLCJpYXQiOjE1OTA0NDkyNTJ9.mqPS3J90RZlb1ptsxaDwtPRpU5VNFj7mvCQxGjBpxUQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "page_number",
									"value": "11",
									"type": "text"
								},
								{
									"key": "note",
									"value": "N",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookmark/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bookmark",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjEiLCJpYXQiOjE1OTA0NDkyNTJ9.mqPS3J90RZlb1ptsxaDwtPRpU5VNFj7mvCQxGjBpxUQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/bookmark/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bookshelf",
			"item": [
				{
					"name": "Insert Bookshelf",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InZpbmNlbnQiLCJwYXNzd29yZCI6InZjIiwibmFtZSI6IlZpbmNlbnQiLCJwaG9uZV9udW1iZXIiOiIwODc4MTkxMTE1NzUiLCJ0eXBlIjoxLCJwcm9maWxlX3BpY3R1cmUiOiIxNTkwNDIxODY1MzU5LmpwZyIsImlhdCI6MTU5MDQ4NjU5OH0.L4MV5pPU7evtIgD0BafbPRH3yypJkOX-Ka4zS0lg1bA",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "book_id",
									"value": "40",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookshelf/insert",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"insert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Bookshelf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InZpbmNlbnQiLCJwYXNzd29yZCI6InZjIiwibmFtZSI6IlZpbmNlbnQiLCJwaG9uZV9udW1iZXIiOiIwODc4MTkxMTE1NzUiLCJ0eXBlIjoxLCJwcm9maWxlX3BpY3R1cmUiOiIxNTkwNDIxODY1MzU5LmpwZyIsImlhdCI6MTU5MDQ4NjU5OH0.L4MV5pPU7evtIgD0BafbPRH3yypJkOX-Ka4zS0lg1bA",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/bookshelf/",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User's Bookshelf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/bookshelf/search/u1",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"search",
								"u1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Bookshelf Privacy",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InZpbmNlbnQiLCJwYXNzd29yZCI6InZjIiwibmFtZSI6IlZpbmNlbnQiLCJwaG9uZV9udW1iZXIiOiIwODc4MTkxMTE1NzUiLCJ0eXBlIjoxLCJwcm9maWxlX3BpY3R1cmUiOiIxNTkwNDIxODY1MzU5LmpwZyIsImlhdCI6MTU5MDQ4NjU5OH0.L4MV5pPU7evtIgD0BafbPRH3yypJkOX-Ka4zS0lg1bA",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/bookshelf/changePrivacy",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"changePrivacy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bookshelf",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InZpbmNlbnQiLCJwYXNzd29yZCI6InZjIiwibmFtZSI6IlZpbmNlbnQiLCJwaG9uZV9udW1iZXIiOiIwODc4MTkxMTE1NzUiLCJ0eXBlIjoxLCJwcm9maWxlX3BpY3R1cmUiOiIxNTkwNDIxODY1MzU5LmpwZyIsImlhdCI6MTU5MDQ4NjU5OH0.L4MV5pPU7evtIgD0BafbPRH3yypJkOX-Ka4zS0lg1bA",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "book_id",
									"value": "40",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookshelf/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"delete"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Playlist",
			"item": [
				{
					"name": "Create Playlist",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBhcXN5IiwicGFzc3dvcmQiOiJhc2QiLCJuYW1lIjoiUGFxc3kiLCJwaG9uZV9udW1iZXIiOiIxMjM0NTY3ODkwIiwidHlwZSI6MSwicHJvZmlsZV9waWN0dXJlIjoiMTU5MDQyMjA1MDY4NS5qcGciLCJpYXQiOjE1OTA0MjU5MTZ9.CMtcwVWvnaSxn1iG-xsHY-m6aHPpUs24KILGbJvj5HY",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Paqsy3",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/create",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert Book",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBhcXN5IiwicGFzc3dvcmQiOiJhc2QiLCJuYW1lIjoiUGFxc3kiLCJwaG9uZV9udW1iZXIiOiIxMjM0NTY3ODkwIiwidHlwZSI6MSwicHJvZmlsZV9waWN0dXJlIjoiMTU5MDQyMjA1MDY4NS5qcGciLCJpYXQiOjE1OTA0MjcyMjB9.TW15sfH8isnLPblAsqWKKGhMhzbsIhqRollE5s1lRNA",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "PL001",
									"type": "text"
								},
								{
									"key": "book_id",
									"value": "100",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/insert",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"insert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show user's playlist",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBhcXN5IiwicGFzc3dvcmQiOiJhc2QiLCJuYW1lIjoiUGFxc3kiLCJwaG9uZV9udW1iZXIiOiIxMjM0NTY3ODkwIiwidHlwZSI6MSwicHJvZmlsZV9waWN0dXJlIjoiMTU5MDQyMjA1MDY4NS5qcGciLCJpYXQiOjE1OTA0MjcyMjB9.TW15sfH8isnLPblAsqWKKGhMhzbsIhqRollE5s1lRNA",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/playlist",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Playlist by Username",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/playlist/search/user/paqsy?sort=date",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"search",
								"user",
								"paqsy"
							],
							"query": [
								{
									"key": "sort",
									"value": "date",
									"description": "name/date/uncheck"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Playlist by Playlist's Name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/playlist/search/name/paq?sort=date",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"search",
								"name",
								"paq"
							],
							"query": [
								{
									"key": "sort",
									"value": "date",
									"description": "name/date/uncheck"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Playlist's Name",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBhcXN5IiwicGFzc3dvcmQiOiJhc2QiLCJuYW1lIjoiUGFxc3kiLCJwaG9uZV9udW1iZXIiOiIxMjM0NTY3ODkwIiwidHlwZSI6MSwicHJvZmlsZV9waWN0dXJlIjoiMTU5MDQyMjA1MDY4NS5qcGciLCJpYXQiOjE1OTA0ODAyNDN9.CqkVypF5K_hD3ial2tq9QUI8RI-LrRj-SNjXvC8Twcs",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "PL001",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Paq1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/changeName",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"changeName"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Privacy Playlist",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBhcXN5IiwicGFzc3dvcmQiOiJhc2QiLCJuYW1lIjoiUGFxc3kiLCJwaG9uZV9udW1iZXIiOiIxMjM0NTY3ODkwIiwidHlwZSI6MSwicHJvZmlsZV9waWN0dXJlIjoiMTU5MDQyMjA1MDY4NS5qcGciLCJpYXQiOjE1OTA0ODE0NTN9.IObazaalIFyX2ZuCY42oon9IAJVoM_KQAxTRTUAKaZc",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "PL001",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/changePrivacy",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"changePrivacy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Book From Playlist",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBhcXN5IiwicGFzc3dvcmQiOiJhc2QiLCJuYW1lIjoiUGFxc3kiLCJwaG9uZV9udW1iZXIiOiIxMjM0NTY3ODkwIiwidHlwZSI6MSwicHJvZmlsZV9waWN0dXJlIjoiMTU5MDQyMjA1MDY4NS5qcGciLCJpYXQiOjE1OTA0ODE0NTN9.IObazaalIFyX2ZuCY42oon9IAJVoM_KQAxTRTUAKaZc",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "PL001",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/delete/book/50",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"delete",
								"book",
								"50"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Playlist",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InZpbmNlbnQiLCJwYXNzd29yZCI6InZjIiwibmFtZSI6IlZpbmNlbnQiLCJwaG9uZV9udW1iZXIiOiIwODc4MTkxMTE1NzUiLCJ0eXBlIjoxLCJwcm9maWxlX3BpY3R1cmUiOiIxNTkwNDIxODY1MzU5LmpwZyIsImlhdCI6MTU5MDQ4MjMwNH0.BhAgGJ5UAOyREZo8-ViMX8mWEDYGl0LMnGPEB41hfDg",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "PL004",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"delete"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User Testing",
			"item": [
				{
					"name": "Register User (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "80c53f62-dee0-4320-9d87-0c0c6cc8ef3d",
								"exec": [
									"data = pm.environment.get(\"register\");\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"register_status_code\":400,\r",
									"            \"register_message\":\"Username Kosong\"\r",
									"        },\r",
									"        {\r",
									"            \"register_username\": \"u10\",\r",
									"            \"register_status_code\":400,\r",
									"            \"register_message\":\"Password Kosong\"\r",
									"        },\r",
									"        {\r",
									"            \"register_username\": \"u10\",\r",
									"            \"register_password\": \"10\",\r",
									"            \"register_status_code\":400,\r",
									"            \"register_message\":\"name Kosong\"\r",
									"        },\r",
									"        {\r",
									"            \"register_username\": \"u10\",\r",
									"            \"register_password\": \"10\",\r",
									"            \"register_name\": \"n10\",\r",
									"            \"register_status_code\":400,\r",
									"            \"register_message\":\"phone number Kosong\"\r",
									"        },\r",
									"        {\r",
									"            \"register_username\": \"u12\",\r",
									"            \"register_password\": \"12\",\r",
									"            \"register_name\": \"n12\",\r",
									"            \"register_phone_number\": \"087819111575\",\r",
									"            \"register_status_code\":200,\r",
									"            \"register_message\":\"akun u12 berhasil dibuat\"\r",
									"        },\r",
									"        {\r",
									"            \"register_username\": \"u12\",\r",
									"            \"register_password\": \"12\",\r",
									"            \"register_name\": \"n12\",\r",
									"            \"register_phone_number\": \"087819111575\",\r",
									"            \"register_status_code\":400,\r",
									"            \"register_message\":\"Username sudah terpakai\"\r",
									"        },\r",
									"        {\r",
									"            \"register_username\": \"u1\",\r",
									"            \"register_password\": \"1\",\r",
									"            \"register_name\": \"n1\",\r",
									"            \"register_phone_number\": \"1\",\r",
									"            \"register_status_code\":200,\r",
									"            \"register_message\":\"akun u1 berhasil dibuat\"\r",
									"        },\r",
									"        {\r",
									"            \"register_username\": \"u2\",\r",
									"            \"register_password\": \"2\",\r",
									"            \"register_name\": \"n2\",\r",
									"            \"register_phone_number\": \"2\",\r",
									"            \"register_status_code\":200,\r",
									"            \"register_message\":\"akun u2 berhasil dibuat\"\r",
									"        },\r",
									"        {\r",
									"            \"register_username\": \"u10\",\r",
									"            \"register_password\": \"10\",\r",
									"            \"register_name\": \"n10\",\r",
									"            \"register_phone_number\": \"10\",\r",
									"            \"register_status_code\":200,\r",
									"            \"register_message\":\"akun u10 berhasil dibuat\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"register_username\", currentData[\"register_username\"]);\r",
									"pm.environment.set(\"register_password\", currentData[\"register_password\"]);\r",
									"pm.environment.set(\"register_name\", currentData[\"register_name\"]);\r",
									"pm.environment.set(\"register_phone_number\", currentData[\"register_phone_number\"]);\r",
									"pm.environment.set(\"register_status_code\", currentData[\"register_status_code\"]);\r",
									"pm.environment.set(\"register_message\", currentData[\"register_message\"]);\r",
									"pm.environment.set(\"register\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1d0aedd4-71f4-4162-a0eb-85ba1691bb9d",
								"exec": [
									"data = pm.environment.get(\"register\");\r",
									"\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Register User (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"register_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned message is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(pm.variables.get(\"register_message\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"register_username\");\r",
									"    pm.environment.unset(\"register_password\");\r",
									"    pm.environment.unset(\"register_name\");\r",
									"    pm.environment.unset(\"register_phone_number\");\r",
									"    pm.environment.unset(\"register_status_code\");\r",
									"    pm.environment.unset(\"register_message\");\r",
									"    pm.environment.unset(\"register\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{register_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{register_password}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{register_name}}",
									"type": "text"
								},
								{
									"key": "phone_number",
									"value": "{{register_phone_number}}",
									"type": "text"
								},
								{
									"key": "profile_picture",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{url}}/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88831d4d-44f1-417d-ab8a-69b12b90613b",
								"exec": [
									"data = pm.environment.get(\"login\");\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"login_status_code\":400,\r",
									"            \"login_message\":\"Username Kosong\"\r",
									"        },\r",
									"        {\r",
									"            \"login_username\": \"u10\",\r",
									"            \"login_status_code\":400,\r",
									"            \"login_message\":\"Password Kosong\"\r",
									"        },\r",
									"        {\r",
									"            \"login_username\": \"u200\",\r",
									"            \"login_password\": \"200\",\r",
									"            \"login_status_code\":400,\r",
									"            \"login_message\":\"akun tidak ditemukan\"\r",
									"        },\r",
									"        {\r",
									"            \"login_username\": \"u10\",\r",
									"            \"login_password\": \"10\",\r",
									"            \"login_status_code\":200\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"login_username\", currentData[\"login_username\"]);\r",
									"pm.environment.set(\"login_password\", currentData[\"login_password\"]);\r",
									"pm.environment.set(\"login_status_code\", currentData[\"login_status_code\"]);\r",
									"pm.environment.set(\"login_message\", currentData[\"login_message\"]);\r",
									"pm.environment.set(\"login\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "622d3e16-8f54-46b9-8820-85e621b370ba",
								"exec": [
									"data = pm.environment.get(\"login\");\r",
									"\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Login User (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"login_status_code\"));\r",
									"});\r",
									"\r",
									"if(pm.variables.get(\"login_status_code\") == 200){\r",
									"    \r",
									"}else{\r",
									"    pm.test(\"Returned message is correct\", function () {\r",
									"        pm.expect(pm.response.text()).to.eql(pm.variables.get(\"login_message\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"login_username\");\r",
									"    pm.environment.unset(\"login_password\");\r",
									"    pm.environment.unset(\"login_status_code\");\r",
									"    pm.environment.unset(\"login_message\");\r",
									"    pm.environment.unset(\"login\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{login_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{login_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "39b73457-7da5-465c-892c-9c30f60cce91",
								"exec": [
									"data = pm.environment.get(\"update\");\r",
									"\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"\r",
									"if(pm.variables.get(\"update_order\")==2 || pm.variables.get(\"update_order\")==3 || pm.variables.get(\"update_order\")==4){\r",
									"    pm.sendRequest({\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        body: {\r",
									"            mode: 'urlencoded',\r",
									"            urlencoded: [\r",
									"                {key: \"username\", value: \"u1\", disabled:false},\r",
									"                {key: \"password\", value: \"1\", disabled:false},\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        pm.environment.set(\"update_jwt\", response.json().token);\r",
									"    });\r",
									"}\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"update_username\": \"u10\",\r",
									"            \"update_jwt\":\"\",\r",
									"            \"update_order\":1,\r",
									"            \"update_status_code\":401,\r",
									"            \"update_message\":\"Token not found\"\r",
									"        },\r",
									"        {\r",
									"            \"update_username\": \"u10\",\r",
									"            \"update_jwt\":\"asdf\",\r",
									"            \"update_order\":2,\r",
									"            \"update_status_code\":401,\r",
									"            \"update_message\":\"Token Invalid\"\r",
									"        },\r",
									"        {\r",
									"            \"update_username\": \"u200\",\r",
									"            \"update_status_code\":404,\r",
									"            \"update_order\":3,\r",
									"            \"update_message\":\"Username Tidak Sesuai Dengan Token\"\r",
									"        },\r",
									"        {\r",
									"            \"update_username\":\"u1\",\r",
									"            \"update_password\":\"1\",\r",
									"            \"update_name\":\"nama 1\",\r",
									"            \"update_phone_number\":\"1\",\r",
									"            \"update_order\":4,\r",
									"            \"update_status_code\":200,\r",
									"            \"update_message\":\"Update informasi berhasil\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"update_username\", currentData[\"update_username\"]);\r",
									"pm.environment.set(\"update_password\", currentData[\"update_password\"]);\r",
									"pm.environment.set(\"update_name\", currentData[\"update_name\"]);\r",
									"pm.environment.set(\"update_phone_number\", currentData[\"update_phone_number\"]);\r",
									"pm.environment.set(\"update_status_code\", currentData[\"update_status_code\"]);\r",
									"pm.environment.set(\"update_message\", currentData[\"update_message\"]);\r",
									"pm.environment.set(\"update_order\",currentData[\"update_order\"]);\r",
									"pm.environment.set(\"update_jwt\",currentData[\"update_jwt\"]);\r",
									"pm.environment.set(\"update\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "edacec4d-d089-4e09-a3c5-fcd947f6392f",
								"exec": [
									"data = pm.environment.get(\"update\");\r",
									"\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Update User (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"update_status_code\"));\r",
									"});\r",
									"\r",
									"if(pm.variables.get(\"update_status_code\")==200){\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    tests[\"Returned message is correct\"] = jsonData.message===pm.variables.get(\"update_message\");\r",
									"}else{\r",
									"    pm.test(\"Returned message is correct\", function () {\r",
									"        pm.expect(pm.response.text()).to.eql(pm.variables.get(\"update_message\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"update_username\");\r",
									"    pm.environment.unset(\"update_password\");\r",
									"    pm.environment.unset(\"update_name\");\r",
									"    pm.environment.unset(\"update_phone_number\");\r",
									"    pm.environment.unset(\"update_status_code\");\r",
									"    pm.environment.unset(\"update_message\");\r",
									"    pm.environment.unset(\"update_jwt\");\r",
									"    pm.environment.unset(\"update_order\");\r",
									"    pm.environment.unset(\"update\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{update_jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "password",
									"value": "{{update_password}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{update_name}}",
									"type": "text"
								},
								{
									"key": "phone_number",
									"value": "{{update_phone_number}}",
									"type": "text"
								},
								{
									"key": "profile_picture",
									"type": "file",
									"src": "/C:/Users/Vincent/Pictures/lobster.JPG"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user/updateUser/{{update_username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"updateUser",
								"{{update_username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "739e74c3-bf0d-4765-a574-1139beaac7a7",
								"exec": [
									"data = pm.environment.get(\"get_user\");\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"get_user_keyword\": \"u100\",\r",
									"            \"get_user_status_code\":404,\r",
									"            \"get_user_message\":\"Akun tidak ditemukan\"\r",
									"        },\r",
									"        {\r",
									"            \"get_user_keyword\": \"u10\",\r",
									"            \"get_user_status_code\":200,\r",
									"            \"get_user_message\":\"Akun berhasil ditemukan\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"get_user_keyword\", currentData[\"get_user_keyword\"]);\r",
									"pm.environment.set(\"get_user_status_code\", currentData[\"get_user_status_code\"]);\r",
									"pm.environment.set(\"get_user_message\", currentData[\"get_user_message\"]);\r",
									"pm.environment.set(\"get_user\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db2e9f8d-be6e-4e7a-9666-aa5a728e240a",
								"exec": [
									"data = pm.environment.get(\"get_user\");\r",
									"\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Get User (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"get_user_status_code\"));\r",
									"});\r",
									"\r",
									"if(pm.variables.get(\"get_user_status_code\")==200){\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    tests[\"Returned message is correct\"] = jsonData.message===pm.variables.get(\"get_user_message\");\r",
									"}else{\r",
									"    pm.test(\"Returned message is correct\", function () {\r",
									"        pm.expect(pm.response.text()).to.eql(pm.variables.get(\"get_user_message\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"get_user_keyword\");\r",
									"    pm.environment.unset(\"get_user_status_code\");\r",
									"    pm.environment.unset(\"get_user_message\");\r",
									"    pm.environment.unset(\"get_user\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user/{{get_user_keyword}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{get_user_keyword}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6504d5a3-8571-4bcd-9ad5-052d4ea0fd6f",
								"exec": [
									"data = pm.environment.get(\"delete\");\r",
									"\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"\r",
									"if(pm.variables.get(\"delete_order\")==2 || pm.variables.get(\"delete_order\")==3 || pm.variables.get(\"delete_order\")==4){\r",
									"    pm.sendRequest({\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        body: {\r",
									"            mode: 'urlencoded',\r",
									"            urlencoded: [\r",
									"                {key: \"username\", value: \"u12\", disabled:false},\r",
									"                {key: \"password\", value: \"12\", disabled:false},\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        pm.environment.set(\"delete_jwt\", response.json().token);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"delete_username\": \"u10\",\r",
									"            \"delete_jwt\":null,\r",
									"            \"delete_order\":1,\r",
									"            \"delete_status_code\":401,\r",
									"            \"delete_message\":\"Token not found\"\r",
									"        },\r",
									"        {\r",
									"            \"delete_username\": \"u10\",\r",
									"            \"delete_jwt\":\"asdf\",\r",
									"            \"delete_order\":2,\r",
									"            \"delete_status_code\":401,\r",
									"            \"delete_message\":\"Token Invalid\"\r",
									"        },\r",
									"        {\r",
									"            \"delete_username\": \"u200\",\r",
									"            \"delete_order\":3,\r",
									"            \"delete_status_code\":404,\r",
									"            \"delete_message\":\"Username Tidak Sesuai Dengan Token\"\r",
									"        },\r",
									"        {\r",
									"            \"delete_username\":\"u12\",\r",
									"            \"delete_order\":4,\r",
									"            \"delete_status_code\":200,\r",
									"            \"delete_message\":\"Berhasil delete akun u12\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"delete_username\", currentData[\"delete_username\"]);\r",
									"pm.environment.set(\"delete_status_code\", currentData[\"delete_status_code\"]);\r",
									"pm.environment.set(\"delete_order\", currentData[\"delete_order\"]);\r",
									"pm.environment.set(\"delete_message\", currentData[\"delete_message\"]);\r",
									"pm.environment.set(\"delete_order\",currentData[\"delete_order\"]);\r",
									"pm.environment.set(\"delete_jwt\",currentData[\"delete_jwt\"]);\r",
									"pm.environment.set(\"delete\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d01b6c77-fe51-4616-b6a4-726d6dea11da",
								"exec": [
									"data = pm.environment.get(\"delete\");\r",
									"\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Delete User (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"delete_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned message is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(pm.variables.get(\"delete_message\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"delete_username\");\r",
									"    pm.environment.unset(\"delete_status_code\");\r",
									"    pm.environment.unset(\"delete_message\");\r",
									"    pm.environment.unset(\"delete_order\");\r",
									"    pm.environment.unset(\"delete_jwt\");\r",
									"    pm.environment.unset(\"delete\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{delete_jwt}}"
							}
						],
						"url": {
							"raw": "{{url}}/user/{{delete_username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{delete_username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upgrade User (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5d977ad4-6cc8-4bf5-81a4-6f2faadfb6ab",
								"exec": [
									"data = pm.environment.get(\"upgrade\");\r",
									"\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"\r",
									"if(pm.variables.get(\"upgrade_order\")==3){\r",
									"    pm.sendRequest({\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        body: {\r",
									"            mode: 'urlencoded',\r",
									"            urlencoded: [\r",
									"                {key: \"username\", value: \"u1\", disabled:false},\r",
									"                {key: \"password\", value: \"1\", disabled:false},\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        pm.environment.set(\"upgrade_jwt\", response.json().token);\r",
									"    });\r",
									"}else if(pm.variables.get(\"upgrade_order\")==2){\r",
									"    pm.sendRequest({\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        body: {\r",
									"            mode: 'urlencoded',\r",
									"            urlencoded: [\r",
									"                {key: \"username\", value: \"u1\", disabled:false},\r",
									"                {key: \"password\", value: \"1\", disabled:false},\r",
									"            ]\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        pm.environment.set(\"upgrade_jwt\", response.json().token);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"upgrade_jwt\":null,\r",
									"            \"upgrade_order\":1,\r",
									"            \"upgrade_status_code\":401,\r",
									"            \"upgrade_message\":\"Token not found\"\r",
									"        },\r",
									"        {\r",
									"            \"upgrade_jwt\":\"asdf\",\r",
									"            \"upgrade_order\":2,\r",
									"            \"upgrade_status_code\":401,\r",
									"            \"upgrade_message\":\"Token Invalid\"\r",
									"        },\r",
									"        {\r",
									"            \"upgrade_order\":3,\r",
									"            \"upgrade_status_code\":200,\r",
									"            \"upgrade_message\":\"Akun 1 sudah premium\"\r",
									"        },\r",
									"        {\r",
									"            \"upgrade_order\":4,\r",
									"            \"upgrade_status_code\":200\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"upgrade_username\", currentData[\"upgrade_username\"]);\r",
									"pm.environment.set(\"upgrade_status_code\", currentData[\"upgrade_status_code\"]);\r",
									"pm.environment.set(\"upgrade_order\", currentData[\"upgrade_order\"]);\r",
									"pm.environment.set(\"upgrade_message\", currentData[\"upgrade_message\"]);\r",
									"pm.environment.set(\"upgrade_order\",currentData[\"upgrade_order\"]);\r",
									"pm.environment.set(\"upgrade_jwt\",currentData[\"upgrade_jwt\"]);\r",
									"pm.environment.set(\"upgrade\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a05c4257-3d2e-4d10-90db-62cb1ef12e7e",
								"exec": [
									"data = pm.environment.get(\"upgrade\");\r",
									"\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Upgrade User (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"upgrade_status_code\"));\r",
									"});\r",
									"\r",
									"if(pm.variables.get(\"upgrade_status_code\")==200){\r",
									"    \r",
									"}else{\r",
									"    pm.test(\"Returned message is correct\", function () {\r",
									"        pm.expect(pm.response.text()).to.eql(pm.variables.get(\"upgrade_message\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"upgrade_username\");\r",
									"    pm.environment.unset(\"upgrade_status_code\");\r",
									"    pm.environment.unset(\"upgrade_message\");\r",
									"    pm.environment.unset(\"upgrade_jwt\");\r",
									"    pm.environment.unset(\"upgrade_order\");\r",
									"    pm.environment.unset(\"upgrade\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{upgrade_jwt}}"
							}
						],
						"url": {
							"raw": "{{url}}/user/upgrade",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"upgrade"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Review Testing",
			"item": [
				{
					"name": "Create Review User 1 (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88fadc4e-df54-4308-a88d-ca81c8322375",
								"exec": [
									"data = pm.environment.get(\"create_review\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"create_review_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"create_review_id_book\": \"9999999\",\r",
									"            \"create_review_rating\": \"1\",\r",
									"            \"create_review_comment\": \"Bad\",\r",
									"            \"create_review_status_code\": 404,\r",
									"            \"create_review_body\":{\r",
									"                \"status\": 404,\r",
									"                \"message\": \"Book not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_review_id_book\": \"1\",\r",
									"            \"create_review_rating\": \"1\",\r",
									"            \"create_review_comment\": \"Bad\",\r",
									"            \"create_review_status_code\": 201,\r",
									"            \"create_review_body\":{\r",
									"                \"status\": 201,\r",
									"                \"message\": \"Review for book with id 1 created!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_review_id_book\": \"1\",\r",
									"            \"create_review_rating\": \"3\",\r",
									"            \"create_review_comment\": \"Not bad\",\r",
									"            \"create_review_status_code\": 400,\r",
									"            \"create_review_body\":{\r",
									"                \"status\": 400,\r",
									"                \"message\": \"You have reviewed this book!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_review_id_book\": \"1\",\r",
									"            \"create_review_rating\": \"\",\r",
									"            \"create_review_comment\": \"Not bad\",\r",
									"            \"create_review_status_code\": 400,\r",
									"            \"create_review_body\":{\r",
									"                \"status\": 400,\r",
									"                \"message\": \"Required field is not filled!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"create_review_id_book\", currentData[\"create_review_id_book\"]);\r",
									"pm.environment.set(\"create_review_rating\", currentData[\"create_review_rating\"]);\r",
									"pm.environment.set(\"create_review_comment\", currentData[\"create_review_comment\"]);\r",
									"pm.environment.set(\"create_review_status_code\", currentData[\"create_review_status_code\"]);\r",
									"pm.environment.set(\"create_review_body\", currentData[\"create_review_body\"]);\r",
									"pm.environment.set(\"create_review\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ef841d2e-b994-4b08-8ba7-a51c4c928e88",
								"exec": [
									"data = pm.environment.get(\"create_review\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Create Review User 1 (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Create Review User 2 (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"create_review_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"create_review_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"create_review\");\r",
									"    pm.environment.unset(\"create_review_id_book\");\r",
									"    pm.environment.unset(\"create_review_rating\");\r",
									"    pm.environment.unset(\"create_review_comment\");\r",
									"    pm.environment.unset(\"create_review_status_code\");\r",
									"    pm.environment.unset(\"create_review_body\");\r",
									"    pm.environment.unset(\"create_review_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{create_review_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rating",
									"value": "{{create_review_rating}}",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "{{create_review_comment}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/review/{{create_review_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"{{create_review_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Review User 2 (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6df3c29c-2b8a-4728-a783-16586854d3f6",
								"exec": [
									"data = pm.environment.get(\"create_review\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u2\", disabled:false},\r",
									"            {key: \"password\", value: \"2\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"create_review_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"create_review_id_book\": \"1\",\r",
									"            \"create_review_rating\": \"3\",\r",
									"            \"create_review_comment\": \"Not bad\",\r",
									"            \"create_review_status_code\": 201,\r",
									"            \"create_review_body\":{\r",
									"                \"status\": 201,\r",
									"                \"message\": \"Review for book with id 1 created!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_review_id_book\": \"2\",\r",
									"            \"create_review_rating\": \"5\",\r",
									"            \"create_review_comment\": \"Good\",\r",
									"            \"create_review_status_code\": 201,\r",
									"            \"create_review_body\":{\r",
									"                \"status\": 201,\r",
									"                \"message\": \"Review for book with id 2 created!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"create_review_id_book\", currentData[\"create_review_id_book\"]);\r",
									"pm.environment.set(\"create_review_rating\", currentData[\"create_review_rating\"]);\r",
									"pm.environment.set(\"create_review_comment\", currentData[\"create_review_comment\"]);\r",
									"pm.environment.set(\"create_review_status_code\", currentData[\"create_review_status_code\"]);\r",
									"pm.environment.set(\"create_review_body\", currentData[\"create_review_body\"]);\r",
									"pm.environment.set(\"create_review\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12225cff-10b5-4d32-a4e6-dae600d9308a",
								"exec": [
									"data = pm.environment.get(\"create_review\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Create Review User 2 (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Get Review (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"create_review_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"create_review_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"create_review\");\r",
									"    pm.environment.unset(\"create_review_id_book\");\r",
									"    pm.environment.unset(\"create_review_rating\");\r",
									"    pm.environment.unset(\"create_review_comment\");\r",
									"    pm.environment.unset(\"create_review_status_code\");\r",
									"    pm.environment.unset(\"create_review_body\");\r",
									"    pm.environment.unset(\"create_review_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{create_review_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rating",
									"value": "{{create_review_rating}}",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "{{create_review_comment}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/review/{{create_review_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"{{create_review_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Review (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cb928a64-33cc-4161-8df4-9d7e48d06bec",
								"exec": [
									"data = pm.environment.get(\"get_review\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"get_review_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"get_review_id_book\": \"\",\r",
									"            \"get_review_username\": \"\",\r",
									"            \"get_review_rating\": \"\",\r",
									"            \"get_review_status_code\": 200,\r",
									"            \"get_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"reviews\": [\r",
									"                    {\r",
									"                        \"id_book\": 1,\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2006\",\r",
									"                        \"average_rating\": 2,\r",
									"                        \"name\": \"n1\",\r",
									"                        \"rating\": 1,\r",
									"                        \"comment\": \"Bad\"\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": 1,\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2006\",\r",
									"                        \"average_rating\": 2,\r",
									"                        \"name\": \"n2\",\r",
									"                        \"rating\": 3,\r",
									"                        \"comment\": \"Not bad\"\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": 2,\r",
									"                        \"title\": \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2004\",\r",
									"                        \"average_rating\": 5,\r",
									"                        \"name\": \"n2\",\r",
									"                        \"rating\": 5,\r",
									"                        \"comment\": \"Good\"\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        },{\r",
									"            \"get_review_id_book\": \"1\",\r",
									"            \"get_review_username\": \"\",\r",
									"            \"get_review_rating\": \"\",\r",
									"            \"get_review_status_code\": 200,\r",
									"            \"get_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"reviews\": [\r",
									"                    {\r",
									"                        \"id_book\": 1,\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2006\",\r",
									"                        \"average_rating\": 2,\r",
									"                        \"name\": \"n1\",\r",
									"                        \"rating\": 1,\r",
									"                        \"comment\": \"Bad\"\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": 1,\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2006\",\r",
									"                        \"average_rating\": 2,\r",
									"                        \"name\": \"n2\",\r",
									"                        \"rating\": 3,\r",
									"                        \"comment\": \"Not bad\"\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        },{\r",
									"            \"get_review_id_book\": \"\",\r",
									"            \"get_review_username\": \"u1\",\r",
									"            \"get_review_rating\": \"\",\r",
									"            \"get_review_status_code\": 200,\r",
									"            \"get_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"reviews\": [\r",
									"                    {\r",
									"                        \"id_book\": 1,\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2006\",\r",
									"                        \"average_rating\": 2,\r",
									"                        \"name\": \"n1\",\r",
									"                        \"rating\": 1,\r",
									"                        \"comment\": \"Bad\"\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        },{\r",
									"            \"get_review_id_book\": \"\",\r",
									"            \"get_review_username\": \"u1\",\r",
									"            \"get_review_rating\": \"1\",\r",
									"            \"get_review_status_code\": 200,\r",
									"            \"get_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"reviews\": [\r",
									"                    {\r",
									"                        \"id_book\": 1,\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2006\",\r",
									"                        \"average_rating\": 2,\r",
									"                        \"name\": \"n1\",\r",
									"                        \"rating\": 1,\r",
									"                        \"comment\": \"Bad\"\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"get_review_id_book\", currentData[\"get_review_id_book\"]);\r",
									"pm.environment.set(\"get_review_rating\", currentData[\"get_review_rating\"]);\r",
									"pm.environment.set(\"get_review_username\", currentData[\"get_review_username\"]);\r",
									"pm.environment.set(\"get_review_status_code\", currentData[\"get_review_status_code\"]);\r",
									"pm.environment.set(\"get_review_body\", currentData[\"get_review_body\"]);\r",
									"pm.environment.set(\"get_review\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "076c4805-cb81-4910-9483-26d4a173705d",
								"exec": [
									"data = pm.environment.get(\"get_review\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Get Review (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Update Review (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"get_review_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"get_review_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"get_review\");\r",
									"    pm.environment.unset(\"get_review_id_book\");\r",
									"    pm.environment.unset(\"get_review_rating\");\r",
									"    pm.environment.unset(\"get_review_username\");\r",
									"    pm.environment.unset(\"get_review_status_code\");\r",
									"    pm.environment.unset(\"get_review_body\");\r",
									"    pm.environment.unset(\"get_review_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{get_review_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/review/?id_book={{get_review_id_book}}&username={{get_review_username}}&rating={{get_review_rating}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								""
							],
							"query": [
								{
									"key": "id_book",
									"value": "{{get_review_id_book}}"
								},
								{
									"key": "username",
									"value": "{{get_review_username}}"
								},
								{
									"key": "rating",
									"value": "{{get_review_rating}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Review (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aa613959-b2f4-48b4-b8d0-de7156a6f9f2",
								"exec": [
									"data = pm.environment.get(\"update_review\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u2\", disabled:false},\r",
									"            {key: \"password\", value: \"2\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"update_review_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"update_review_id_book\": \"9999999\",\r",
									"            \"update_review_rating\": \"4\",\r",
									"            \"update_review_comment\": \"Nice one\",\r",
									"            \"update_review_status_code\": 404,\r",
									"            \"update_review_body\":{\r",
									"                \"status\": 404,\r",
									"                \"message\": \"Book not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"update_review_id_book\": \"1\",\r",
									"            \"update_review_rating\": \"4\",\r",
									"            \"update_review_comment\": \"Nice one\",\r",
									"            \"update_review_status_code\": 200,\r",
									"            \"update_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"message\": \"Review updated!\"\r",
									"            }\r",
									"        },{\r",
									"            \"update_review_id_book\": \"3\",\r",
									"            \"update_review_rating\": \"1\",\r",
									"            \"update_review_comment\": \"Bad\",\r",
									"            \"update_review_status_code\": 404,\r",
									"            \"update_review_body\":{\r",
									"                \"status\": 404,\r",
									"                \"message\": \"You never review this book!\"\r",
									"            }\r",
									"        },{\r",
									"            \"update_review_id_book\": \"1\",\r",
									"            \"update_review_rating\": \"\",\r",
									"            \"update_review_comment\": \"\",\r",
									"            \"update_review_status_code\": 400,\r",
									"            \"update_review_body\":{\r",
									"                \"status\": 400,\r",
									"                \"message\": \"Required field is not filled!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"update_review_id_book\", currentData[\"update_review_id_book\"]);\r",
									"pm.environment.set(\"update_review_rating\", currentData[\"update_review_rating\"]);\r",
									"pm.environment.set(\"update_review_comment\", currentData[\"update_review_comment\"]);\r",
									"pm.environment.set(\"update_review_status_code\", currentData[\"update_review_status_code\"]);\r",
									"pm.environment.set(\"update_review_body\", currentData[\"update_review_body\"]);\r",
									"pm.environment.set(\"update_review\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0c17657f-0cc2-46be-84aa-b70a51cc9fc1",
								"exec": [
									"data = pm.environment.get(\"update_review\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Update Review (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Delete Review (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"update_review_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"update_review_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"update_review\");\r",
									"    pm.environment.unset(\"update_review_id_book\");\r",
									"    pm.environment.unset(\"update_review_rating\");\r",
									"    pm.environment.unset(\"update_review_comment\");\r",
									"    pm.environment.unset(\"update_review_status_code\");\r",
									"    pm.environment.unset(\"update_review_body\");\r",
									"    pm.environment.unset(\"update_review_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{update_review_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rating",
									"value": "{{update_review_rating}}",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "{{update_review_comment}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/review/{{update_review_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"{{update_review_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Review (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f66b5962-e4d1-47a9-9223-4c358b449bbf",
								"exec": [
									"data = pm.environment.get(\"delete_review\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u2\", disabled:false},\r",
									"            {key: \"password\", value: \"2\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"delete_review_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"delete_review_id_book\": \"9999999\",\r",
									"            \"delete_review_status_code\": 404,\r",
									"            \"delete_review_body\":{\r",
									"                \"status\": 404,\r",
									"                \"message\": \"Book not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"delete_review_id_book\": \"3\",\r",
									"            \"delete_review_status_code\": 404,\r",
									"            \"delete_review_body\":{\r",
									"                \"status\": 404,\r",
									"                \"message\": \"Review not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"delete_review_id_book\": \"1\",\r",
									"            \"delete_review_status_code\": 200,\r",
									"            \"delete_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"message\": \"Review deleted!\"\r",
									"            }\r",
									"        },{\r",
									"            \"delete_review_id_book\": \"2\",\r",
									"            \"delete_review_status_code\": 200,\r",
									"            \"delete_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"message\": \"Review deleted!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"delete_review_id_book\", currentData[\"delete_review_id_book\"]);\r",
									"pm.environment.set(\"delete_review_status_code\", currentData[\"delete_review_status_code\"]);\r",
									"pm.environment.set(\"delete_review_body\", currentData[\"delete_review_body\"]);\r",
									"pm.environment.set(\"delete_review\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4aac7bf5-264a-4904-81fd-e78f3678810c",
								"exec": [
									"data = pm.environment.get(\"delete_review\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Delete Review (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"delete_review_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"delete_review_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"delete_review\");\r",
									"    pm.environment.unset(\"delete_review_id_book\");\r",
									"    pm.environment.unset(\"delete_review_status_code\");\r",
									"    pm.environment.unset(\"delete_review_body\");\r",
									"    pm.environment.unset(\"delete_review_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{delete_review_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/review/{{delete_review_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"{{delete_review_id_book}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Book Testing",
			"item": [
				{
					"name": "Get Book Detail by Id (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f2ebbd4-9a2f-4cef-b12d-5198734e4e08",
								"exec": [
									"data = pm.environment.get(\"get_book\");\r",
									"url = pm.environment.get(\"url\") + '/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            { key: \"username\", value: \"u1\", disabled: false },\r",
									"            { key: \"password\", value: \"1\", disabled: false },\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"get_book_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if (!data || data.length <= 0) {\r",
									"    data = [\r",
									"        {\r",
									"            \"get_book_id_book\": \"1\",\r",
									"            \"get_book_status_code\": 200,\r",
									"            \"get_book_body\": {\r",
									"                \"status\": 200,\r",
									"                \"book\": {\r",
									"                    \"id_book\": \"1\",\r",
									"                    \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                    \"author\": \"J.K. Rowling\",\r",
									"                    \"year\": \"2006\",\r",
									"                    \"average_rating\": 1,\r",
									"                    \"description\": \"The war against Voldemort is not going well; even Muggle governments are noticing. Ron scans the obituary pages of the <i>Daily Prophet</i>, looking for familiar names. Dumbledore is absent from Hogwarts for long stretches of time, and the Order of the Phoenix has already suffered losses.<br /><br />And yet . . .<br /><br />As in all wars, life goes on. The Weasley twins expand their business. Sixth-year students learn to Apparate - and lose a few eyebrows in the process. Teenagers flirt and fight and fall in love. Classes are never straightforward, through Harry receives some extraordinary help from the mysterious Half-Blood Prince.<br /><br />So it's the home front that takes center stage in the multilayered sixth installment of the story of Harry Potter. Here at Hogwarts, Harry will search for the full and complete story of the boy who became Lord Voldemort - and thereby find what may be his only vulnerability.\"\r",
									"                }\r",
									"            }\r",
									"        }, {\r",
									"            \"get_book_id_book\": \"9999999\",\r",
									"            \"get_book_status_code\": 404,\r",
									"            \"get_book_body\": {\r",
									"                \"status\": 404,\r",
									"                \"message\": \"Book not found!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"get_book_id_book\", currentData[\"get_book_id_book\"]);\r",
									"pm.environment.set(\"get_book_status_code\", currentData[\"get_book_status_code\"]);\r",
									"pm.environment.set(\"get_book_body\", currentData[\"get_book_body\"]);\r",
									"pm.environment.set(\"get_book\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "485195ae-6adb-4058-8ca2-918dbe0663f3",
								"exec": [
									"data = pm.environment.get(\"get_book\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Get Book Detail by Id (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Search Book by Query (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"get_book_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"get_book_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"get_book\");\r",
									"    pm.environment.unset(\"get_book_id_book\");\r",
									"    pm.environment.unset(\"get_book_status_code\");\r",
									"    pm.environment.unset(\"get_book_body\");\r",
									"    pm.environment.unset(\"get_book_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{get_book_jwt}}"
							}
						],
						"url": {
							"raw": "{{url}}/search/id/{{get_book_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"search",
								"id",
								"{{get_book_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Book by Query (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3313cb74-962c-45af-8eea-48ca4eb33aba",
								"exec": [
									"data = pm.environment.get(\"get_book\");\r",
									"url = pm.environment.get(\"url\") + '/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            { key: \"username\", value: \"u1\", disabled: false },\r",
									"            { key: \"password\", value: \"1\", disabled: false },\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"get_book_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if (!data || data.length <= 0) {\r",
									"    data = [\r",
									"        {\r",
									"            \"get_book_query\": \"harry\",\r",
									"            \"get_book_page\": \"1\",\r",
									"            \"get_book_status_code\": 200,\r",
									"            \"get_book_body\": {\r",
									"                \"status\": 200,\r",
									"                \"books\": [\r",
									"                    {\r",
									"                        \"id_book\": \"3\",\r",
									"                        \"title\": \"Harry Potter and the Sorcerer's Stone (Harry Potter, #1)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"1997\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"5\",\r",
									"                        \"title\": \"Harry Potter and the Prisoner of Azkaban (Harry Potter, #3)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"1999\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"2\",\r",
									"                        \"title\": \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2003\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"6\",\r",
									"                        \"title\": \"Harry Potter and the Goblet of Fire (Harry Potter, #4)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2000\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"1\",\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2005\",\r",
									"                        \"average_rating\": 1\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"29056083\",\r",
									"                        \"title\": \"Harry Potter and the Cursed Child: Parts One and Two (Harry Potter, #8)\",\r",
									"                        \"author\": \"John Tiffany\",\r",
									"                        \"year\": \"2016\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"136251\",\r",
									"                        \"title\": \"Harry Potter and the Deathly Hallows (Harry Potter, #7)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2007\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"862041\",\r",
									"                        \"title\": \"Harry Potter Series Box Set (Harry Potter, #1-7)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2007\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"79885\",\r",
									"                        \"title\": \"The Lincoln Lawyer (Mickey Haller, #1; Harry Bosch Universe, #15)\",\r",
									"                        \"author\": \"Michael Connelly\",\r",
									"                        \"year\": \"2005\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"32508\",\r",
									"                        \"title\": \"The Black Echo (Harry Bosch, #1; Harry Bosch Universe, #1)\",\r",
									"                        \"author\": \"Michael Connelly\",\r",
									"                        \"year\": \"1992\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"426775\",\r",
									"                        \"title\": \"Chasing Harry Winston\",\r",
									"                        \"author\": \"Lauren Weisberger\",\r",
									"                        \"year\": \"2008\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"9572203\",\r",
									"                        \"title\": \"The Snowman (Harry Hole, #7)\",\r",
									"                        \"author\": \"Jo Nesbø\",\r",
									"                        \"year\": \"2007\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"15881\",\r",
									"                        \"title\": \"Harry Potter and the Chamber of Secrets (Harry Potter, #2)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"1998\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"465226\",\r",
									"                        \"title\": \"The Redbreast (Harry Hole, #3)\",\r",
									"                        \"author\": \"Jo Nesbø\",\r",
									"                        \"year\": \"2000\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"32506\",\r",
									"                        \"title\": \"The Poet (Jack McEvoy, #1; Harry Bosch Universe, #5)\",\r",
									"                        \"author\": \"Michael Connelly\",\r",
									"                        \"year\": \"1996\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"1317181\",\r",
									"                        \"title\": \"Harry Potter and the Order of the Phoenix (Harry Potter, #5, Part 1)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2003\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"24244\",\r",
									"                        \"title\": \"The Black Ice (Harry Bosch, #2; Harry Bosch Universe, #2)\",\r",
									"                        \"author\": \"Michael Connelly\",\r",
									"                        \"year\": \"1993\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"3522419\",\r",
									"                        \"title\": \"Nemesis (Harry Hole, #4)\",\r",
									"                        \"author\": \"Jo Nesbø\",\r",
									"                        \"year\": \"2002\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"20706317\",\r",
									"                        \"title\": \"The First Fifteen Lives of Harry August\",\r",
									"                        \"author\": \"Claire North\",\r",
									"                        \"year\": \"2014\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"2761626\",\r",
									"                        \"title\": \"The Brass Verdict (Harry Bosch, #14; Mickey Haller, #2; Harry Bosch Universe, #18)\",\r",
									"                        \"author\": \"Michael Connelly\",\r",
									"                        \"year\": \"2008\",\r",
									"                        \"average_rating\": null\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        }, {\r",
									"            \"get_book_query\": \" \",\r",
									"            \"get_book_page\": \"1\",\r",
									"            \"get_book_status_code\": 404,\r",
									"            \"get_book_body\": {\r",
									"                \"status\": 404,\r",
									"                \"message\": \"Books not found!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"get_book_query\", currentData[\"get_book_query\"]);\r",
									"pm.environment.set(\"get_book_page\", currentData[\"get_book_page\"]);\r",
									"pm.environment.set(\"get_book_status_code\", currentData[\"get_book_status_code\"]);\r",
									"pm.environment.set(\"get_book_body\", currentData[\"get_book_body\"]);\r",
									"pm.environment.set(\"get_book\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b32b9f2f-53c5-4812-a4d9-71f601a8d19e",
								"exec": [
									"data = pm.environment.get(\"get_book\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Search Book by Query (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"get_book_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"get_book_body\"));\r",
									"    // if(pm.variables.get(\"get_book_body\").books!=null){\r",
									"    //     pm.expect(jsonData).to.eql(pm.variables.get(\"get_book_body\"));\r",
									"    // }\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"get_book\");\r",
									"    pm.environment.unset(\"get_book_query\");\r",
									"    pm.environment.unset(\"get_book_page\");\r",
									"    pm.environment.unset(\"get_book_status_code\");\r",
									"    pm.environment.unset(\"get_book_body\");\r",
									"    pm.environment.unset(\"get_book_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{get_book_jwt}}"
							}
						],
						"url": {
							"raw": "{{url}}/search/?query={{get_book_query}}&page={{get_book_page}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"search",
								""
							],
							"query": [
								{
									"key": "query",
									"value": "{{get_book_query}}"
								},
								{
									"key": "page",
									"value": "{{get_book_page}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bookmark Testing",
			"item": [
				{
					"name": "Create Bookmark Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a47e8389-db28-41bc-b7d4-33e5aec58865",
								"exec": [
									"data = pm.environment.get(\"create_bookmark\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"create_bookmark_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"create_bookmark_id_book\" : \"9999999\",\r",
									"            \"create_bookmark_page_number\" : \"10\",\r",
									"            \"create_bookmark_note\" : \"Notes\",\r",
									"            \"create_bookmark_status_code\": 404,\r",
									"            \"create_bookmark_body\" : {\r",
									"                \"status\" : 404,\r",
									"                \"message\" : \"Book not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_bookmark_id_book\" : \"1\",\r",
									"            \"create_bookmark_page_number\" : \"10\",\r",
									"            \"create_bookmark_note\" : \"Notes\",\r",
									"            \"create_bookmark_status_code\": 200,\r",
									"            \"create_bookmark_body\" : {\r",
									"                \"status\" : 200,\r",
									"                \"message\" : \"Bookmark for book with id 1 created!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_bookmark_id_book\" : \"1\",\r",
									"            \"create_bookmark_page_number\" : \"10\",\r",
									"            \"create_bookmark_note\" : \"Notes\",\r",
									"            \"create_bookmark_status_code\": 400,\r",
									"            \"create_bookmark_body\" : {\r",
									"                \"status\" : 400,\r",
									"                \"message\" : \"You have bookmark this book!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_bookmark_id_book\" : \"1\",\r",
									"            \"create_bookmark_page_number\" : \"10\",\r",
									"            \"create_bookmark_note\" : \"\",\r",
									"            \"create_bookmark_status_code\": 400,\r",
									"            \"create_bookmark_body\" : {\r",
									"                \"status\" : 400,\r",
									"                \"message\" : \"Required field is not filled!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"create_bookmark_id_book\", currentData[\"create_bookmark_id_book\"]);\r",
									"pm.environment.set(\"create_bookmark_page_number\", currentData[\"create_bookmark_page_number\"]);\r",
									"pm.environment.set(\"create_bookmark_note\", currentData[\"create_bookmark_note\"]);\r",
									"pm.environment.set(\"create_bookmark_status_code\", currentData[\"create_bookmark_status_code\"]);\r",
									"pm.environment.set(\"create_bookmark_body\", currentData[\"create_bookmark_body\"]);\r",
									"pm.environment.set(\"create_bookmark\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4de462d2-1c7b-46bc-b4fd-c2eac36cacbd",
								"exec": [
									"data = pm.environment.get(\"create_bookmark\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Create Bookmark Testing\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Get Bookmark Testing\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"create_bookmark_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"create_bookmark_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"create_bookmark\");\r",
									"    pm.environment.unset(\"create_bookmark_id_book\");\r",
									"    pm.environment.unset(\"create_bookmark_page_number\");\r",
									"    pm.environment.unset(\"create_bookmark_note\");\r",
									"    pm.environment.unset(\"create_bookmark_status_code\");\r",
									"    pm.environment.unset(\"create_bookmark_body\");\r",
									"    pm.environment.unset(\"create_bookmark_jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{create_review_jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "page_number",
									"value": "{{create_bookmark_page_number}}",
									"type": "text"
								},
								{
									"key": "note",
									"value": "{{create_bookmark_note}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookmark/{{create_bookmark_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"{{create_bookmark_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bookmark Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "26637cd1-7983-4a11-9899-be37d7ac9651",
								"exec": [
									"data = pm.environment.get(\"get_bookmark\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"get_bookmark_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"get_bookmark_id_book\" : \"\",\r",
									"            \"get_bookmark_status_code\" : 404,\r",
									"            \"get_bookmark_body\" : {\r",
									"                \"status\" : 404,\r",
									"                \"message\": \"Book not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"get_bookmark_id_book\" : \"1\",\r",
									"            \"get_bookmark_status_code\" : 200,\r",
									"            \"get_bookmark_body\" : {\r",
									"                \"status\" : 200,\r",
									"                \"bookmark\": {\r",
									"                    \"id_book\" : 1,\r",
									"                    \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                    \"author\": \"J.K. Rowling\",\r",
									"                    \"year\": \"2006\",\r",
									"                    \"page_number\": 10,\r",
									"                    \"note\": \"Notes\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"get_bookmark_id_book\", currentData[\"get_bookmark_id_book\"]);\r",
									"pm.environment.set(\"get_bookmark_status_code\", currentData[\"get_bookmark_status_code\"]);\r",
									"pm.environment.set(\"get_bookmark_body\", currentData[\"get_bookmark_body\"]);\r",
									"pm.environment.set(\"get_bookmark\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "df713b1e-b30b-4866-8711-0815f2e49bb8",
								"exec": [
									"data = pm.environment.get(\"get_bookmark\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Get Bookmark Testing\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Update Bookmark Testing\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"get_bookmark_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"get_bookmark_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"get_bookmark\");\r",
									"    pm.environment.unset(\"get_bookmark_id_book\");\r",
									"    pm.environment.unset(\"get_bookmark_status_code\");\r",
									"    pm.environment.unset(\"get_bookmark_body\");\r",
									"    pm.environment.unset(\"get_bookmark_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{get_bookmark_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/bookmark/{{get_bookmark_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"{{get_bookmark_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Bookmark Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2ef28e68-7f13-492c-8d04-6978dc2d7792",
								"exec": [
									"data = pm.environment.get(\"update_bookmark\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"update_bookmark_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"update_bookmark_id_book\" : \"9999999\",\r",
									"            \"update_bookmark_page_number\" : \"10\",\r",
									"            \"update_bookmark_note\" : \"Notes\",\r",
									"            \"update_bookmark_status_code\" : 404,\r",
									"            \"update_bookmark_body\" : {\r",
									"                \"status\" : 404,\r",
									"                \"message\" : \"Book not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"update_bookmark_id_book\" : \"1\",\r",
									"            \"update_bookmark_page_number\" : \"11\",\r",
									"            \"update_bookmark_note\" : \"note update\",\r",
									"            \"update_bookmark_status_code\" : 200,\r",
									"            \"update_bookmark_body\" : {\r",
									"                \"status\" : 200,\r",
									"                \"message\" : \"Bookmark updated!\"\r",
									"            }\r",
									"        },{\r",
									"            \"update_bookmark_id_book\" : \"1\",\r",
									"            \"update_bookmark_page_number\" : \"\",\r",
									"            \"update_bookmark_note\" : \"\",\r",
									"            \"update_bookmark_status_code\" : 400,\r",
									"            \"update_bookmark_body\" : {\r",
									"                \"status\" : 400,\r",
									"                \"message\" : \"Required field is not filled!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"update_bookmark_id_book\", currentData[\"update_bookmark_id_book\"]);\r",
									"pm.environment.set(\"update_bookmark_page_number\", currentData[\"update_bookmark_page_number\"]);\r",
									"pm.environment.set(\"update_bookmark_note\", currentData[\"update_bookmark_note\"]);\r",
									"pm.environment.set(\"update_bookmark_status_code\", currentData[\"update_bookmark_status_code\"]);\r",
									"pm.environment.set(\"update_bookmark_body\", currentData[\"update_bookmark_body\"]);\r",
									"pm.environment.set(\"update_bookmark\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8cf10f79-6ad3-400a-ad12-185da0650da5",
								"exec": [
									"data = pm.environment.get(\"update_bookmark\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Update Bookmark Testing\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Delete Bookmark Testing\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"update_bookmark_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"update_bookmark_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"update_bookmark\");\r",
									"    pm.environment.unset(\"update_bookmark_id_book\");\r",
									"    pm.environment.unset(\"update_bookmark_page_number\");\r",
									"    pm.environment.unset(\"update_bookmark_note\");\r",
									"    pm.environment.unset(\"update_bookmark_status_code\");\r",
									"    pm.environment.unset(\"update_bookmark_body\");\r",
									"    pm.environment.unset(\"update_bookmark_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{update_bookmark_jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "page_number",
									"value": "{{update_bookmark_page_number}}",
									"type": "text"
								},
								{
									"key": "note",
									"value": "{{update_bookmark_note}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookmark/{{update_bookmark_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"{{update_bookmark_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bookmark Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b1329bbb-417b-455d-8630-8120b9a7a08f",
								"exec": [
									"data = pm.environment.get(\"delete_bookmark\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"delete_bookmark_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"delete_bookmark_id_book\" : \"9999999\",\r",
									"            \"delete_bookmark_status_code\" : 400,\r",
									"            \"delete_bookmark_body\" : {\r",
									"                \"status\" : 400,\r",
									"                \"message\" : \"Book not found!\"\r",
									"            } \r",
									"        },{\r",
									"            \"delete_bookmark_id_book\" : \"1\",\r",
									"            \"delete_bookmark_status_code\" : 200,\r",
									"            \"delete_bookmark_body\" : {\r",
									"                \"status\" : 200,\r",
									"                \"message\" : \"Bookmark deleted!\"\r",
									"            } \r",
									"        },{\r",
									"            \"delete_bookmark_id_book\" : \"31\",\r",
									"            \"delete_bookmark_status_code\" : 404,\r",
									"            \"delete_bookmark_body\" : {\r",
									"                \"status\" : 404,\r",
									"                \"message\" : \"Bookmark not found!\"\r",
									"            } \r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"delete_bookmark_id_book\", currentData[\"delete_bookmark_id_book\"]);\r",
									"pm.environment.set(\"delete_bookmark_status_code\", currentData[\"delete_bookmark_status_code\"]);\r",
									"pm.environment.set(\"delete_bookmark_body\", currentData[\"delete_bookmark_body\"]);\r",
									"pm.environment.set(\"delete_bookmark\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b10ccafe-8111-476d-9589-7f929be25cc7",
								"exec": [
									"data = pm.environment.get(\"delete_bookmark\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Delete Bookmark Testing\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"delete_bookmark_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"delete_bookmark_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"delete_bookmark\");\r",
									"    pm.environment.unset(\"delete_bookmark_id_book\");\r",
									"    pm.environment.unset(\"delete_bookmark_status_code\");\r",
									"    pm.environment.unset(\"delete_bookmark_body\");\r",
									"    pm.environment.unset(\"delete_bookmark_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{delete_bookmark_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/bookmark/{{delete_bookmark_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"{{delete_bookmark_id_book}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Playlist Testing",
			"item": [
				{
					"name": "Create Playlist (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0efaf043-c7a4-4609-a30b-6a6024e03a10",
								"exec": [
									"data = pm.environment.get(\"playlist_create\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"name\" : \"Coba Playlist 1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"New Playlist Created\"\r",
									"        },{\r",
									"            \"name\" : \"Coba Playlist 3\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"You already have 2 playlists, please upgrade your account\"\r",
									"        },{\r",
									"            \"name\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"name\", currentData[\"name\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_create\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a38df2f-3912-4147-b09f-8730db19a4db",
								"exec": [
									"data = pm.environment.get(\"playlist_create\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Create Playlist (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Insert Book (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_create\");\r",
									"    pm.environment.unset(\"name\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/create",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert Book (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a5ca6fd9-5de2-4952-a41a-81ed2c06d6bc",
								"exec": [
									"data = pm.environment.get(\"playlist_insert\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_playlist\" : \"PL999\",\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Playlist not found!\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"id_book\" : \"9999\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Book not found!\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Success insert book with id 1 to your playlist\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"This book is already in your playlist\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"\",\r",
									"            \"id_book\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_playlist\", currentData[\"id_playlist\"]);\r",
									"pm.environment.set(\"id_book\", currentData[\"id_book\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_insert\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "49399930-9982-4097-8dbb-5db36042b998",
								"exec": [
									"data = pm.environment.get(\"playlist_insert\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Insert Book (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Show user's playlist (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_insert\");\r",
									"    pm.environment.unset(\"id_playlist\");\r",
									"    pm.environment.unset(\"id_book\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "{{id_playlist}}",
									"type": "text"
								},
								{
									"key": "book_id",
									"value": "{{id_book}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/insert",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"insert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show user's playlist (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fe238078-e67f-458e-b4b5-b83a5a659913",
								"exec": [
									"data = pm.environment.get(\"playlist_show\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Your playlist is empty\"\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_show\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb9f18c5-4ff4-470e-8f59-066d96bb5cbf",
								"exec": [
									"data = pm.environment.get(\"playlist_show\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Show user's playlist (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Search Playlist by Username (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_create\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/playlist",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Playlist by Username (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "38fdac83-3ba4-4fa5-beae-f39ec18f3272",
								"exec": [
									"data = pm.environment.get(\"playlist_search_user\");\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"status_code\": 400,\r",
									"            \"username\" : \"\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : \"Fill all of the available fields\"\r",
									"        },{\r",
									"            \"status_code\": 404,\r",
									"            \"username\" : \"lololol\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : \"User not found!\"\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"username\" : \"u2\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : \"His/her doesn't has playlist\"\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"username\" : \"u1\",\r",
									"            \"orderby\" : \"\",\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                }\r",
									"            ]\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"username\" : \"u1\",\r",
									"            \"orderby\" : \"name\",\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                }\r",
									"            ]\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"username\" : \"u1\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                },{\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"username\", currentData[\"username\"]);\r",
									"pm.environment.set(\"orderby\", currentData[\"orderby\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_search_user\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fb3f09f3-0c4e-4b16-b0ea-bb5c7a1c2db5",
								"exec": [
									"data = pm.environment.get(\"playlist_search_user\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Search Playlist by Username (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Search Playlist by Playlist's Name (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_search_user\");\r",
									"    pm.environment.unset(\"username\");\r",
									"    pm.environment.unset(\"orderby\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/playlist/search/user/{{username}}?sort={{orderby}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"search",
								"user",
								"{{username}}"
							],
							"query": [
								{
									"key": "sort",
									"value": "{{orderby}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Playlist by Playlist's Name (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "adcf5696-1c2e-4586-85c7-8186e29825ed",
								"exec": [
									"data = pm.environment.get(\"playlist_search_name\");\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"status_code\": 400,\r",
									"            \"name\" : \"\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : \"Fill all of the available fields\"\r",
									"        },{\r",
									"            \"status_code\": 404,\r",
									"            \"name\" : \"lololol\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : \"Playlist not found!\"\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"name\" : \"play\",\r",
									"            \"orderby\" : \"\",\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                }\r",
									"            ]\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"name\" : \"play\",\r",
									"            \"orderby\" : \"name\",\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                }\r",
									"            ]\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"name\" : \"play\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                },{\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"name\", currentData[\"name\"]);\r",
									"pm.environment.set(\"orderby\", currentData[\"orderby\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_search_name\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7b760ee-3251-40ac-99f8-201f75b4c095",
								"exec": [
									"data = pm.environment.get(\"playlist_search_name\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Search Playlist by Playlist's Name (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Update Playlist's Name (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_search_name\");\r",
									"    pm.environment.unset(\"username\");\r",
									"    pm.environment.unset(\"orderby\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/playlist/search/name/{{name}}?sort={{orderby}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"search",
								"name",
								"{{name}}"
							],
							"query": [
								{
									"key": "sort",
									"value": "{{orderby}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Playlist's Name (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f3597a4-d8be-42a5-ac4a-f67ef01bee71",
								"exec": [
									"data = pm.environment.get(\"playlist_change_name\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_playlist\" : \"PL999\",\r",
									"            \"name\" : \"Coba Ganti\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Playlist not found!\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"id_book\" : \"Coba Ganti\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Playlist's name is already change to 'Coba Ganti'\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"\",\r",
									"            \"name\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_playlist\", currentData[\"id_playlist\"]);\r",
									"pm.environment.set(\"name\", currentData[\"name\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_change_name\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9cb621e7-aa25-4efd-968b-adabe364fc48",
								"exec": [
									"data = pm.environment.get(\"playlist_change_name\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Update Playlist's Name (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Update Privacy Playlist (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_change_name\");\r",
									"    pm.environment.unset(\"id_playlist\");\r",
									"    pm.environment.unset(\"name\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "{{id_playlist}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/changeName",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"changeName"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Privacy Playlist (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cbadadb9-f4c3-475d-8bdb-67d71b4084b0",
								"exec": [
									"data = pm.environment.get(\"playlist_change_privacy\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_playlist\" : \"PL999\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Playlist not found!\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Change privacy success\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_playlist\", currentData[\"id_playlist\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_change_privacy\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12a6ddca-71bb-4d34-accd-a1dc3f55b1cf",
								"exec": [
									"data = pm.environment.get(\"playlist_change_privacy\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Update Privacy Playlist (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Remove Book From Playlist (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_change_privacy\");\r",
									"    pm.environment.unset(\"id_playlist\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "{{id_playlist}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/changePrivacy",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"changePrivacy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Book From Playlist (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "076ab076-e8ec-4307-a688-9a1fcaae7442",
								"exec": [
									"data = pm.environment.get(\"playlist_remove_book\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_playlist\" : \"PL999\",\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Playlist not found!\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"id_book\" : \"999999\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Book with id 999999 is not in your playlist\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Book with id 1 has deleted from your playlist\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"\",\r",
									"            \"id_book\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_playlist\", currentData[\"id_playlist\"]);\r",
									"pm.environment.set(\"id_book\", currentData[\"id_book\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_remove_book\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b0cc7723-dd1c-40f2-9132-cc0013477d29",
								"exec": [
									"data = pm.environment.get(\"playlist_remove_book\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Remove Book From Playlsit (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Delete Playlist (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_remove_book\");\r",
									"    pm.environment.unset(\"id_playlist\");\r",
									"    pm.environment.unset(\"id_book\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "{{id_playlist}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/delete/book/{{id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"delete",
								"book",
								"{{id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Playlist (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c92e0076-acf8-4f53-a95a-ff807f793c61",
								"exec": [
									"data = pm.environment.get(\"playlist_delete\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_playlist\" : \"PL999\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Playlist not found!\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Playlist with id PL001 has been deleted\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_playlist\", currentData[\"id_playlist\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_delete\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b08100b3-26ed-418d-b841-6b5a3cdf1d67",
								"exec": [
									"data = pm.environment.get(\"playlist_delete\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Remove Book From Playlsit (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_delete\");\r",
									"    pm.environment.unset(\"id_playlist\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "{{id_playlist}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"delete"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bookshelf Testing",
			"item": [
				{
					"name": "Insert Bookshelf (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0693a9a4-0859-4936-9f64-ad2c51d6832b",
								"exec": [
									"data = pm.environment.get(\"bookshelf_insert\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_book\" : \"9999999\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Book not found!\"\r",
									"        },{\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Success insert book with id 1 to your bookshelf!\"\r",
									"        },{\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"This book has already in your bookshelf\"\r",
									"        },{\r",
									"            \"id_book\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_book\", currentData[\"id_book\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"bookshelf_insert\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "762bad6f-6901-476f-872c-cffb8c21096a",
								"exec": [
									"data = pm.environment.get(\"bookshelf_insert\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Insert Bookshelf (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Get User Bookshelf (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"bookshelf_insert\");\r",
									"    pm.environment.unset(\"id_book\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "book_id",
									"value": "{{id_book}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookshelf/insert",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"insert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Bookshelf (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "259038fa-d2d6-4757-843c-f26e88c128a2",
								"exec": [
									"data = pm.environment.get(\"bookshelf_get\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"id\" : 1,\r",
									"                    \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                    \"publication_year\": \"2006\",\r",
									"                    \"publisher\": \"Scholastic Inc.\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\" : 2,\r",
									"                    \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                    \"publication_year\" : \"2004\",\r",
									"                    \"publisher\" : \"Scholastic Inc.\"\r",
									"                }\r",
									"            ]\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Your bookshelf is empty\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"bookshelf_get\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "81f47cd2-dbc6-44ab-b2ac-2593b5cea457",
								"exec": [
									"data = pm.environment.get(\"bookshelf_get\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Get User Bookshelf (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Search User's Bookshelf (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"bookshelf_get\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/bookshelf/",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User's Bookshelf (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "213e8ceb-a148-4622-bbb4-2ce0185023f0",
								"exec": [
									"data = pm.environment.get(\"bookshelf_search\");\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"username\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields\"\r",
									"        },{\r",
									"            \"username\" : \"lololol\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Username not found\"\r",
									"        },{\r",
									"            \"username\" : \"u2\",\r",
									"            \"status_code\": 423,\r",
									"            \"body\" : \"Sorry, his/her bookshelf is private\"\r",
									"        },{\r",
									"            \"username\" : \"u1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"His/her bookshelf is empty\"\r",
									"        },{\r",
									"            \"username\" : \"u1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"id\" : 1,\r",
									"                    \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                    \"publication_year\": \"2006\",\r",
									"                    \"publisher\": \"Scholastic Inc.\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\" : 2,\r",
									"                    \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                    \"publication_year\" : \"2004\",\r",
									"                    \"publisher\" : \"Scholastic Inc.\"\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"username\", currentData[\"username\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"bookshelf_search\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb65f896-bbd5-48dc-8f79-ac5add77034b",
								"exec": [
									"data = pm.environment.get(\"bookshelf_search\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Search User's Bookshelf (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Change Bookshelf Privacy (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"bookshelf_search\");\r",
									"    pm.environment.unset(\"username\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/bookshelf/search/{{username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"search",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Bookshelf Privacy (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b37aff27-9da8-43b5-83d6-0a4112dbcfe7",
								"exec": [
									"data = pm.environment.get(\"bookshelf_change_privacy\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"You're not allowed to access this resource\"\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Change privacy success!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"bookshelf_change_privacy\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "21aebd25-0667-43ae-b939-6049d9350242",
								"exec": [
									"data = pm.environment.get(\"bookshelf_change_privacy\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Change Bookshelf Privacy (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Delete Bookshelf (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"bookshelf_change_privacy\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/bookshelf/changePrivacy",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"changePrivacy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bookshelf (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "64baf05b-7475-44b6-9a4d-26c3e7715269",
								"exec": [
									"data = pm.environment.get(\"bookshelf_delete\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Book with id 1 has deleted from your bookshelf\"\r",
									"        },{\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Book with id 1 is not in your bookshelf\"\r",
									"        },{\r",
									"            \"id_book\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_book\", currentData[\"id_book\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"bookshelf_delete\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "89fe1517-9b1d-40c3-98b8-406dc916194b",
								"exec": [
									"data = pm.environment.get(\"bookshelf_delete\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Delete Bookshelf (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"bookshelf_delete\");\r",
									"    pm.environment.unset(\"id_book\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "book_id",
									"value": "{{id_book}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookshelf/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"delete"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}