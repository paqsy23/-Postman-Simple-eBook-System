{
	"info": {
		"_postman_id": "2af1e557-3664-4500-8648-2964e86074d5",
		"name": "Proyek SOA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "u2",
									"type": "text"
								},
								{
									"key": "password",
									"value": "2",
									"type": "text"
								},
								{
									"key": "name",
									"value": "n2",
									"type": "text"
								},
								{
									"key": "phone_number",
									"value": "2",
									"type": "text"
								},
								{
									"key": "profile_picture",
									"type": "file",
									"src": "/D:/Users/Tjen/Pictures/cat.png"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "u1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "password",
									"value": "1",
									"type": "text"
								},
								{
									"key": "name",
									"value": "n11",
									"type": "text"
								},
								{
									"key": "phone_number",
									"value": "11",
									"type": "text"
								},
								{
									"key": "profile_picture",
									"type": "file",
									"src": "/D:/Users/Tjen/Pictures/cat.png"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user/updateUser/u1",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"updateUser",
								"u1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/u3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"u3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upgrade User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/upgrade",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"upgrade"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user/u",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"u"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Book",
			"item": [
				{
					"name": "Get Book Detail by Id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjEiLCJpYXQiOjE1OTA0NDQ3MjF9.uAOWHNNJ9rc7pAx-AQIqS4gdaAmAiMCq_YOeEmSP5EQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/search/id/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"search",
								"id",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Book by Query",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjEiLCJpYXQiOjE1OTA0NDQ3MjF9.uAOWHNNJ9rc7pAx-AQIqS4gdaAmAiMCq_YOeEmSP5EQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/search/?query=harry&page=2",
							"host": [
								"{{url}}"
							],
							"path": [
								"search",
								""
							],
							"query": [
								{
									"key": "query",
									"value": "harry"
								},
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Review",
			"item": [
				{
					"name": "Create Review",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rating",
									"value": "1",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "Bad",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/review/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Review",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/review/",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								""
							],
							"query": [
								{
									"key": "id_book",
									"value": "2",
									"disabled": true
								},
								{
									"key": "username",
									"value": "u2",
									"disabled": true
								},
								{
									"key": "rating",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Review",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rating",
									"value": "5",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "WOw!",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/review/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Review",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjE1OTA2OTMwMDAwOTIucG5nIiwiaWF0IjoxNTkwNjkzMDU5fQ.-RyCawxyJXIBF7LVOSjTExx_QRanKna371nTXXAOUZE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/review/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bookmark",
			"item": [
				{
					"name": "Create Bookmark",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjEiLCJpYXQiOjE1OTA0NDkyNTJ9.mqPS3J90RZlb1ptsxaDwtPRpU5VNFj7mvCQxGjBpxUQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "page_number",
									"value": "3",
									"type": "text"
								},
								{
									"key": "note",
									"value": "notes",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookmark/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bookmark",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjEiLCJpYXQiOjE1OTA0NDkyNTJ9.mqPS3J90RZlb1ptsxaDwtPRpU5VNFj7mvCQxGjBpxUQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/bookmark/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Bookmark",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjEiLCJpYXQiOjE1OTA0NDkyNTJ9.mqPS3J90RZlb1ptsxaDwtPRpU5VNFj7mvCQxGjBpxUQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "page_number",
									"value": "11",
									"type": "text"
								},
								{
									"key": "note",
									"value": "N",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookmark/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bookmark",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InUxIiwicGFzc3dvcmQiOiIxIiwibmFtZSI6Im4xIiwicGhvbmVfbnVtYmVyIjoiMSIsInR5cGUiOjAsInByb2ZpbGVfcGljdHVyZSI6IjEiLCJpYXQiOjE1OTA0NDkyNTJ9.mqPS3J90RZlb1ptsxaDwtPRpU5VNFj7mvCQxGjBpxUQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/bookmark/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bookshelf",
			"item": [
				{
					"name": "Insert Bookshelf",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InZpbmNlbnQiLCJwYXNzd29yZCI6InZjIiwibmFtZSI6IlZpbmNlbnQiLCJwaG9uZV9udW1iZXIiOiIwODc4MTkxMTE1NzUiLCJ0eXBlIjoxLCJwcm9maWxlX3BpY3R1cmUiOiIxNTkwNDIxODY1MzU5LmpwZyIsImlhdCI6MTU5MDQ4NjU5OH0.L4MV5pPU7evtIgD0BafbPRH3yypJkOX-Ka4zS0lg1bA",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "book_id",
									"value": "40",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookshelf/insert",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"insert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Bookshelf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InZpbmNlbnQiLCJwYXNzd29yZCI6InZjIiwibmFtZSI6IlZpbmNlbnQiLCJwaG9uZV9udW1iZXIiOiIwODc4MTkxMTE1NzUiLCJ0eXBlIjoxLCJwcm9maWxlX3BpY3R1cmUiOiIxNTkwNDIxODY1MzU5LmpwZyIsImlhdCI6MTU5MDQ4NjU5OH0.L4MV5pPU7evtIgD0BafbPRH3yypJkOX-Ka4zS0lg1bA",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/bookshelf/",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User's Bookshelf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/bookshelf/search/u1",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"search",
								"u1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Bookshelf Privacy",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InZpbmNlbnQiLCJwYXNzd29yZCI6InZjIiwibmFtZSI6IlZpbmNlbnQiLCJwaG9uZV9udW1iZXIiOiIwODc4MTkxMTE1NzUiLCJ0eXBlIjoxLCJwcm9maWxlX3BpY3R1cmUiOiIxNTkwNDIxODY1MzU5LmpwZyIsImlhdCI6MTU5MDQ4NjU5OH0.L4MV5pPU7evtIgD0BafbPRH3yypJkOX-Ka4zS0lg1bA",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/bookshelf/changePrivacy",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"changePrivacy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bookshelf",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InZpbmNlbnQiLCJwYXNzd29yZCI6InZjIiwibmFtZSI6IlZpbmNlbnQiLCJwaG9uZV9udW1iZXIiOiIwODc4MTkxMTE1NzUiLCJ0eXBlIjoxLCJwcm9maWxlX3BpY3R1cmUiOiIxNTkwNDIxODY1MzU5LmpwZyIsImlhdCI6MTU5MDQ4NjU5OH0.L4MV5pPU7evtIgD0BafbPRH3yypJkOX-Ka4zS0lg1bA",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "book_id",
									"value": "40",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookshelf/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"delete"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Playlist",
			"item": [
				{
					"name": "Create Playlist",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBhcXN5IiwicGFzc3dvcmQiOiJhc2QiLCJuYW1lIjoiUGFxc3kiLCJwaG9uZV9udW1iZXIiOiIxMjM0NTY3ODkwIiwidHlwZSI6MSwicHJvZmlsZV9waWN0dXJlIjoiMTU5MDQyMjA1MDY4NS5qcGciLCJpYXQiOjE1OTA0MjU5MTZ9.CMtcwVWvnaSxn1iG-xsHY-m6aHPpUs24KILGbJvj5HY",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Paqsy3",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/create",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert Book",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBhcXN5IiwicGFzc3dvcmQiOiJhc2QiLCJuYW1lIjoiUGFxc3kiLCJwaG9uZV9udW1iZXIiOiIxMjM0NTY3ODkwIiwidHlwZSI6MSwicHJvZmlsZV9waWN0dXJlIjoiMTU5MDQyMjA1MDY4NS5qcGciLCJpYXQiOjE1OTA0MjcyMjB9.TW15sfH8isnLPblAsqWKKGhMhzbsIhqRollE5s1lRNA",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "PL001",
									"type": "text"
								},
								{
									"key": "book_id",
									"value": "100",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/insert",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"insert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show user's playlist",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBhcXN5IiwicGFzc3dvcmQiOiJhc2QiLCJuYW1lIjoiUGFxc3kiLCJwaG9uZV9udW1iZXIiOiIxMjM0NTY3ODkwIiwidHlwZSI6MSwicHJvZmlsZV9waWN0dXJlIjoiMTU5MDQyMjA1MDY4NS5qcGciLCJpYXQiOjE1OTA0MjcyMjB9.TW15sfH8isnLPblAsqWKKGhMhzbsIhqRollE5s1lRNA",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/playlist",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Playlist by Username",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/playlist/search/user/paqsy?sort=date",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"search",
								"user",
								"paqsy"
							],
							"query": [
								{
									"key": "sort",
									"value": "date",
									"description": "name/date/uncheck"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Playlist by Playlist's Name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/playlist/search/name/paq?sort=date",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"search",
								"name",
								"paq"
							],
							"query": [
								{
									"key": "sort",
									"value": "date",
									"description": "name/date/uncheck"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Playlist's Name",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBhcXN5IiwicGFzc3dvcmQiOiJhc2QiLCJuYW1lIjoiUGFxc3kiLCJwaG9uZV9udW1iZXIiOiIxMjM0NTY3ODkwIiwidHlwZSI6MSwicHJvZmlsZV9waWN0dXJlIjoiMTU5MDQyMjA1MDY4NS5qcGciLCJpYXQiOjE1OTA0ODAyNDN9.CqkVypF5K_hD3ial2tq9QUI8RI-LrRj-SNjXvC8Twcs",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "PL001",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Paq1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/changeName",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"changeName"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Privacy Playlist",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBhcXN5IiwicGFzc3dvcmQiOiJhc2QiLCJuYW1lIjoiUGFxc3kiLCJwaG9uZV9udW1iZXIiOiIxMjM0NTY3ODkwIiwidHlwZSI6MSwicHJvZmlsZV9waWN0dXJlIjoiMTU5MDQyMjA1MDY4NS5qcGciLCJpYXQiOjE1OTA0ODE0NTN9.IObazaalIFyX2ZuCY42oon9IAJVoM_KQAxTRTUAKaZc",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "PL001",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/changePrivacy",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"changePrivacy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Book From Playlist",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBhcXN5IiwicGFzc3dvcmQiOiJhc2QiLCJuYW1lIjoiUGFxc3kiLCJwaG9uZV9udW1iZXIiOiIxMjM0NTY3ODkwIiwidHlwZSI6MSwicHJvZmlsZV9waWN0dXJlIjoiMTU5MDQyMjA1MDY4NS5qcGciLCJpYXQiOjE1OTA0ODE0NTN9.IObazaalIFyX2ZuCY42oon9IAJVoM_KQAxTRTUAKaZc",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "PL001",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/delete/book/50",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"delete",
								"book",
								"50"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Playlist",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InZpbmNlbnQiLCJwYXNzd29yZCI6InZjIiwibmFtZSI6IlZpbmNlbnQiLCJwaG9uZV9udW1iZXIiOiIwODc4MTkxMTE1NzUiLCJ0eXBlIjoxLCJwcm9maWxlX3BpY3R1cmUiOiIxNTkwNDIxODY1MzU5LmpwZyIsImlhdCI6MTU5MDQ4MjMwNH0.BhAgGJ5UAOyREZo8-ViMX8mWEDYGl0LMnGPEB41hfDg",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "PL004",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"delete"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Review Testing",
			"item": [
				{
					"name": "Create Review User 1 (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00220b7a-8012-4c3d-b813-163e1b975de2",
								"exec": [
									"data = pm.environment.get(\"create_review\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"create_review_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"create_review_id_book\": \"9999999\",\r",
									"            \"create_review_rating\": \"1\",\r",
									"            \"create_review_comment\": \"Bad\",\r",
									"            \"create_review_status_code\": 404,\r",
									"            \"create_review_body\":{\r",
									"                \"status\": 404,\r",
									"                \"message\": \"Book not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_review_id_book\": \"1\",\r",
									"            \"create_review_rating\": \"1\",\r",
									"            \"create_review_comment\": \"Bad\",\r",
									"            \"create_review_status_code\": 201,\r",
									"            \"create_review_body\":{\r",
									"                \"status\": 201,\r",
									"                \"message\": \"Review for book with id 1 created!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_review_id_book\": \"1\",\r",
									"            \"create_review_rating\": \"3\",\r",
									"            \"create_review_comment\": \"Not bad\",\r",
									"            \"create_review_status_code\": 400,\r",
									"            \"create_review_body\":{\r",
									"                \"status\": 400,\r",
									"                \"message\": \"You have reviewed this book!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_review_id_book\": \"1\",\r",
									"            \"create_review_rating\": \"\",\r",
									"            \"create_review_comment\": \"Not bad\",\r",
									"            \"create_review_status_code\": 400,\r",
									"            \"create_review_body\":{\r",
									"                \"status\": 400,\r",
									"                \"message\": \"Required field is not filled!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"create_review_id_book\", currentData[\"create_review_id_book\"]);\r",
									"pm.environment.set(\"create_review_rating\", currentData[\"create_review_rating\"]);\r",
									"pm.environment.set(\"create_review_comment\", currentData[\"create_review_comment\"]);\r",
									"pm.environment.set(\"create_review_status_code\", currentData[\"create_review_status_code\"]);\r",
									"pm.environment.set(\"create_review_body\", currentData[\"create_review_body\"]);\r",
									"pm.environment.set(\"create_review\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0111985e-6cbd-4a02-892b-5d457a5e7a89",
								"exec": [
									"data = pm.environment.get(\"create_review\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Create Review User 1 (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Create Review User 2 (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"create_review_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"create_review_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"create_review\");\r",
									"    pm.environment.unset(\"create_review_id_book\");\r",
									"    pm.environment.unset(\"create_review_rating\");\r",
									"    pm.environment.unset(\"create_review_comment\");\r",
									"    pm.environment.unset(\"create_review_status_code\");\r",
									"    pm.environment.unset(\"create_review_body\");\r",
									"    pm.environment.unset(\"create_review_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{create_review_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rating",
									"value": "{{create_review_rating}}",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "{{create_review_comment}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/review/{{create_review_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"{{create_review_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Review User 2 (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8fb9c2fe-7054-428c-8735-6e21df7f637e",
								"exec": [
									"data = pm.environment.get(\"create_review\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u2\", disabled:false},\r",
									"            {key: \"password\", value: \"2\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"create_review_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"create_review_id_book\": \"1\",\r",
									"            \"create_review_rating\": \"3\",\r",
									"            \"create_review_comment\": \"Not bad\",\r",
									"            \"create_review_status_code\": 201,\r",
									"            \"create_review_body\":{\r",
									"                \"status\": 201,\r",
									"                \"message\": \"Review for book with id 1 created!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_review_id_book\": \"2\",\r",
									"            \"create_review_rating\": \"5\",\r",
									"            \"create_review_comment\": \"Good\",\r",
									"            \"create_review_status_code\": 201,\r",
									"            \"create_review_body\":{\r",
									"                \"status\": 201,\r",
									"                \"message\": \"Review for book with id 2 created!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"create_review_id_book\", currentData[\"create_review_id_book\"]);\r",
									"pm.environment.set(\"create_review_rating\", currentData[\"create_review_rating\"]);\r",
									"pm.environment.set(\"create_review_comment\", currentData[\"create_review_comment\"]);\r",
									"pm.environment.set(\"create_review_status_code\", currentData[\"create_review_status_code\"]);\r",
									"pm.environment.set(\"create_review_body\", currentData[\"create_review_body\"]);\r",
									"pm.environment.set(\"create_review\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "28c256cd-e200-4417-aaf4-b2612b15d3e5",
								"exec": [
									"data = pm.environment.get(\"create_review\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Create Review User 2 (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Get Review (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"create_review_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"create_review_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"create_review\");\r",
									"    pm.environment.unset(\"create_review_id_book\");\r",
									"    pm.environment.unset(\"create_review_rating\");\r",
									"    pm.environment.unset(\"create_review_comment\");\r",
									"    pm.environment.unset(\"create_review_status_code\");\r",
									"    pm.environment.unset(\"create_review_body\");\r",
									"    pm.environment.unset(\"create_review_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{create_review_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rating",
									"value": "{{create_review_rating}}",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "{{create_review_comment}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/review/{{create_review_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"{{create_review_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Review (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f2ceb974-6522-44a0-86c8-5890ba9710d8",
								"exec": [
									"data = pm.environment.get(\"get_review\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"get_review_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"get_review_id_book\": \"\",\r",
									"            \"get_review_username\": \"\",\r",
									"            \"get_review_rating\": \"\",\r",
									"            \"get_review_status_code\": 200,\r",
									"            \"get_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"reviews\": [\r",
									"                    {\r",
									"                        \"id_book\": 1,\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2006\",\r",
									"                        \"average_rating\": 2,\r",
									"                        \"name\": \"n1\",\r",
									"                        \"rating\": 1,\r",
									"                        \"comment\": \"Bad\"\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": 1,\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2006\",\r",
									"                        \"average_rating\": 2,\r",
									"                        \"name\": \"n2\",\r",
									"                        \"rating\": 3,\r",
									"                        \"comment\": \"Not bad\"\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": 2,\r",
									"                        \"title\": \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2004\",\r",
									"                        \"average_rating\": 5,\r",
									"                        \"name\": \"n2\",\r",
									"                        \"rating\": 5,\r",
									"                        \"comment\": \"Good\"\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        },{\r",
									"            \"get_review_id_book\": \"1\",\r",
									"            \"get_review_username\": \"\",\r",
									"            \"get_review_rating\": \"\",\r",
									"            \"get_review_status_code\": 200,\r",
									"            \"get_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"reviews\": [\r",
									"                    {\r",
									"                        \"id_book\": 1,\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2006\",\r",
									"                        \"average_rating\": 2,\r",
									"                        \"name\": \"n1\",\r",
									"                        \"rating\": 1,\r",
									"                        \"comment\": \"Bad\"\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": 1,\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2006\",\r",
									"                        \"average_rating\": 2,\r",
									"                        \"name\": \"n2\",\r",
									"                        \"rating\": 3,\r",
									"                        \"comment\": \"Not bad\"\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        },{\r",
									"            \"get_review_id_book\": \"\",\r",
									"            \"get_review_username\": \"u1\",\r",
									"            \"get_review_rating\": \"\",\r",
									"            \"get_review_status_code\": 200,\r",
									"            \"get_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"reviews\": [\r",
									"                    {\r",
									"                        \"id_book\": 1,\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2006\",\r",
									"                        \"average_rating\": 2,\r",
									"                        \"name\": \"n1\",\r",
									"                        \"rating\": 1,\r",
									"                        \"comment\": \"Bad\"\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        },{\r",
									"            \"get_review_id_book\": \"\",\r",
									"            \"get_review_username\": \"u1\",\r",
									"            \"get_review_rating\": \"1\",\r",
									"            \"get_review_status_code\": 200,\r",
									"            \"get_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"reviews\": [\r",
									"                    {\r",
									"                        \"id_book\": 1,\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2006\",\r",
									"                        \"average_rating\": 2,\r",
									"                        \"name\": \"n1\",\r",
									"                        \"rating\": 1,\r",
									"                        \"comment\": \"Bad\"\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"get_review_id_book\", currentData[\"get_review_id_book\"]);\r",
									"pm.environment.set(\"get_review_rating\", currentData[\"get_review_rating\"]);\r",
									"pm.environment.set(\"get_review_username\", currentData[\"get_review_username\"]);\r",
									"pm.environment.set(\"get_review_status_code\", currentData[\"get_review_status_code\"]);\r",
									"pm.environment.set(\"get_review_body\", currentData[\"get_review_body\"]);\r",
									"pm.environment.set(\"get_review\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e4c2b52a-6df8-4bd1-89eb-19df3a40f036",
								"exec": [
									"data = pm.environment.get(\"get_review\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Get Review (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Update Review (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"get_review_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"get_review_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"get_review\");\r",
									"    pm.environment.unset(\"get_review_id_book\");\r",
									"    pm.environment.unset(\"get_review_rating\");\r",
									"    pm.environment.unset(\"get_review_username\");\r",
									"    pm.environment.unset(\"get_review_status_code\");\r",
									"    pm.environment.unset(\"get_review_body\");\r",
									"    pm.environment.unset(\"get_review_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{get_review_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/review/?id_book={{get_review_id_book}}&username={{get_review_username}}&rating={{get_review_rating}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								""
							],
							"query": [
								{
									"key": "id_book",
									"value": "{{get_review_id_book}}"
								},
								{
									"key": "username",
									"value": "{{get_review_username}}"
								},
								{
									"key": "rating",
									"value": "{{get_review_rating}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Review (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cf33544d-649c-42e9-a02a-4c0f3d68f80c",
								"exec": [
									"data = pm.environment.get(\"update_review\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u2\", disabled:false},\r",
									"            {key: \"password\", value: \"2\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"update_review_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"update_review_id_book\": \"9999999\",\r",
									"            \"update_review_rating\": \"4\",\r",
									"            \"update_review_comment\": \"Nice one\",\r",
									"            \"update_review_status_code\": 404,\r",
									"            \"update_review_body\":{\r",
									"                \"status\": 404,\r",
									"                \"message\": \"Book not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"update_review_id_book\": \"1\",\r",
									"            \"update_review_rating\": \"4\",\r",
									"            \"update_review_comment\": \"Nice one\",\r",
									"            \"update_review_status_code\": 200,\r",
									"            \"update_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"message\": \"Review updated!\"\r",
									"            }\r",
									"        },{\r",
									"            \"update_review_id_book\": \"3\",\r",
									"            \"update_review_rating\": \"1\",\r",
									"            \"update_review_comment\": \"Bad\",\r",
									"            \"update_review_status_code\": 404,\r",
									"            \"update_review_body\":{\r",
									"                \"status\": 404,\r",
									"                \"message\": \"You never review this book!\"\r",
									"            }\r",
									"        },{\r",
									"            \"update_review_id_book\": \"1\",\r",
									"            \"update_review_rating\": \"\",\r",
									"            \"update_review_comment\": \"\",\r",
									"            \"update_review_status_code\": 400,\r",
									"            \"update_review_body\":{\r",
									"                \"status\": 400,\r",
									"                \"message\": \"Required field is not filled!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"update_review_id_book\", currentData[\"update_review_id_book\"]);\r",
									"pm.environment.set(\"update_review_rating\", currentData[\"update_review_rating\"]);\r",
									"pm.environment.set(\"update_review_comment\", currentData[\"update_review_comment\"]);\r",
									"pm.environment.set(\"update_review_status_code\", currentData[\"update_review_status_code\"]);\r",
									"pm.environment.set(\"update_review_body\", currentData[\"update_review_body\"]);\r",
									"pm.environment.set(\"update_review\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7cf8f5f7-34a2-4cc2-ad80-fdd5e94b0f77",
								"exec": [
									"data = pm.environment.get(\"update_review\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Update Review (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Delete Review (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"update_review_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"update_review_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"update_review\");\r",
									"    pm.environment.unset(\"update_review_id_book\");\r",
									"    pm.environment.unset(\"update_review_rating\");\r",
									"    pm.environment.unset(\"update_review_comment\");\r",
									"    pm.environment.unset(\"update_review_status_code\");\r",
									"    pm.environment.unset(\"update_review_body\");\r",
									"    pm.environment.unset(\"update_review_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{update_review_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rating",
									"value": "{{update_review_rating}}",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "{{update_review_comment}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/review/{{update_review_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"{{update_review_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Review (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8ba50e50-4a57-4c22-aedf-57342a83e927",
								"exec": [
									"data = pm.environment.get(\"delete_review\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u2\", disabled:false},\r",
									"            {key: \"password\", value: \"2\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"delete_review_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"delete_review_id_book\": \"9999999\",\r",
									"            \"delete_review_status_code\": 404,\r",
									"            \"delete_review_body\":{\r",
									"                \"status\": 404,\r",
									"                \"message\": \"Book not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"delete_review_id_book\": \"3\",\r",
									"            \"delete_review_status_code\": 404,\r",
									"            \"delete_review_body\":{\r",
									"                \"status\": 404,\r",
									"                \"message\": \"Review not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"delete_review_id_book\": \"1\",\r",
									"            \"delete_review_status_code\": 200,\r",
									"            \"delete_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"message\": \"Review deleted!\"\r",
									"            }\r",
									"        },{\r",
									"            \"delete_review_id_book\": \"2\",\r",
									"            \"delete_review_status_code\": 200,\r",
									"            \"delete_review_body\":{\r",
									"                \"status\": 200,\r",
									"                \"message\": \"Review deleted!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"delete_review_id_book\", currentData[\"delete_review_id_book\"]);\r",
									"pm.environment.set(\"delete_review_status_code\", currentData[\"delete_review_status_code\"]);\r",
									"pm.environment.set(\"delete_review_body\", currentData[\"delete_review_body\"]);\r",
									"pm.environment.set(\"delete_review\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "91738346-954c-4221-98ce-ca5692537b37",
								"exec": [
									"data = pm.environment.get(\"delete_review\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Delete Review (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"delete_review_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"delete_review_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"delete_review\");\r",
									"    pm.environment.unset(\"delete_review_id_book\");\r",
									"    pm.environment.unset(\"delete_review_status_code\");\r",
									"    pm.environment.unset(\"delete_review_body\");\r",
									"    pm.environment.unset(\"delete_review_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{delete_review_jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/review/{{delete_review_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"review",
								"{{delete_review_id_book}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Book Testing",
			"item": [
				{
					"name": "Get Book Detail by Id (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eab43a05-1c1d-4492-af5c-e4bc04f64c92",
								"exec": [
									"data = pm.environment.get(\"get_book\");\r",
									"url = pm.environment.get(\"url\") + '/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            { key: \"username\", value: \"u1\", disabled: false },\r",
									"            { key: \"password\", value: \"1\", disabled: false },\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"get_book_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if (!data || data.length <= 0) {\r",
									"    data = [\r",
									"        {\r",
									"            \"get_book_id_book\": \"1\",\r",
									"            \"get_book_status_code\": 200,\r",
									"            \"get_book_body\": {\r",
									"                \"status\": 200,\r",
									"                \"book\": {\r",
									"                    \"id_book\": \"1\",\r",
									"                    \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                    \"author\": \"J.K. Rowling\",\r",
									"                    \"year\": \"2006\",\r",
									"                    \"average_rating\": 1,\r",
									"                    \"description\": \"The war against Voldemort is not going well; even Muggle governments are noticing. Ron scans the obituary pages of the <i>Daily Prophet</i>, looking for familiar names. Dumbledore is absent from Hogwarts for long stretches of time, and the Order of the Phoenix has already suffered losses.<br /><br />And yet . . .<br /><br />As in all wars, life goes on. The Weasley twins expand their business. Sixth-year students learn to Apparate - and lose a few eyebrows in the process. Teenagers flirt and fight and fall in love. Classes are never straightforward, through Harry receives some extraordinary help from the mysterious Half-Blood Prince.<br /><br />So it's the home front that takes center stage in the multilayered sixth installment of the story of Harry Potter. Here at Hogwarts, Harry will search for the full and complete story of the boy who became Lord Voldemort - and thereby find what may be his only vulnerability.\"\r",
									"                }\r",
									"            }\r",
									"        }, {\r",
									"            \"get_book_id_book\": \"9999999\",\r",
									"            \"get_book_status_code\": 404,\r",
									"            \"get_book_body\": {\r",
									"                \"status\": 404,\r",
									"                \"message\": \"Book not found!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"get_book_id_book\", currentData[\"get_book_id_book\"]);\r",
									"pm.environment.set(\"get_book_status_code\", currentData[\"get_book_status_code\"]);\r",
									"pm.environment.set(\"get_book_body\", currentData[\"get_book_body\"]);\r",
									"pm.environment.set(\"get_book\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "75924236-54a8-4a1b-a383-3a0cb4f87791",
								"exec": [
									"data = pm.environment.get(\"get_book\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Get Book Detail by Id (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Search Book by Query (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"get_book_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"get_book_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"get_book\");\r",
									"    pm.environment.unset(\"get_book_id_book\");\r",
									"    pm.environment.unset(\"get_book_status_code\");\r",
									"    pm.environment.unset(\"get_book_body\");\r",
									"    pm.environment.unset(\"get_book_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{get_book_jwt}}"
							}
						],
						"url": {
							"raw": "{{url}}/search/id/{{get_book_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"search",
								"id",
								"{{get_book_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Book by Query (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "867cf529-49bd-4705-ac43-fef6066bd369",
								"exec": [
									"data = pm.environment.get(\"get_book\");\r",
									"url = pm.environment.get(\"url\") + '/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            { key: \"username\", value: \"u1\", disabled: false },\r",
									"            { key: \"password\", value: \"1\", disabled: false },\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"get_book_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if (!data || data.length <= 0) {\r",
									"    data = [\r",
									"        {\r",
									"            \"get_book_query\": \"harry\",\r",
									"            \"get_book_page\": \"1\",\r",
									"            \"get_book_status_code\": 200,\r",
									"            \"get_book_body\": {\r",
									"                \"status\": 200,\r",
									"                \"books\": [\r",
									"                    {\r",
									"                        \"id_book\": \"3\",\r",
									"                        \"title\": \"Harry Potter and the Sorcerer's Stone (Harry Potter, #1)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"1997\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"5\",\r",
									"                        \"title\": \"Harry Potter and the Prisoner of Azkaban (Harry Potter, #3)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"1999\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"2\",\r",
									"                        \"title\": \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2003\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"6\",\r",
									"                        \"title\": \"Harry Potter and the Goblet of Fire (Harry Potter, #4)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2000\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"1\",\r",
									"                        \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2005\",\r",
									"                        \"average_rating\": 1\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"29056083\",\r",
									"                        \"title\": \"Harry Potter and the Cursed Child: Parts One and Two (Harry Potter, #8)\",\r",
									"                        \"author\": \"John Tiffany\",\r",
									"                        \"year\": \"2016\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"136251\",\r",
									"                        \"title\": \"Harry Potter and the Deathly Hallows (Harry Potter, #7)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2007\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"862041\",\r",
									"                        \"title\": \"Harry Potter Series Box Set (Harry Potter, #1-7)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2007\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"79885\",\r",
									"                        \"title\": \"The Lincoln Lawyer (Mickey Haller, #1; Harry Bosch Universe, #15)\",\r",
									"                        \"author\": \"Michael Connelly\",\r",
									"                        \"year\": \"2005\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"32508\",\r",
									"                        \"title\": \"The Black Echo (Harry Bosch, #1; Harry Bosch Universe, #1)\",\r",
									"                        \"author\": \"Michael Connelly\",\r",
									"                        \"year\": \"1992\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"426775\",\r",
									"                        \"title\": \"Chasing Harry Winston\",\r",
									"                        \"author\": \"Lauren Weisberger\",\r",
									"                        \"year\": \"2008\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"9572203\",\r",
									"                        \"title\": \"The Snowman (Harry Hole, #7)\",\r",
									"                        \"author\": \"Jo Nesbø\",\r",
									"                        \"year\": \"2007\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"15881\",\r",
									"                        \"title\": \"Harry Potter and the Chamber of Secrets (Harry Potter, #2)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"1998\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"465226\",\r",
									"                        \"title\": \"The Redbreast (Harry Hole, #3)\",\r",
									"                        \"author\": \"Jo Nesbø\",\r",
									"                        \"year\": \"2000\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"32506\",\r",
									"                        \"title\": \"The Poet (Jack McEvoy, #1; Harry Bosch Universe, #5)\",\r",
									"                        \"author\": \"Michael Connelly\",\r",
									"                        \"year\": \"1996\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"1317181\",\r",
									"                        \"title\": \"Harry Potter and the Order of the Phoenix (Harry Potter, #5, Part 1)\",\r",
									"                        \"author\": \"J.K. Rowling\",\r",
									"                        \"year\": \"2003\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"24244\",\r",
									"                        \"title\": \"The Black Ice (Harry Bosch, #2; Harry Bosch Universe, #2)\",\r",
									"                        \"author\": \"Michael Connelly\",\r",
									"                        \"year\": \"1993\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"3522419\",\r",
									"                        \"title\": \"Nemesis (Harry Hole, #4)\",\r",
									"                        \"author\": \"Jo Nesbø\",\r",
									"                        \"year\": \"2002\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"20706317\",\r",
									"                        \"title\": \"The First Fifteen Lives of Harry August\",\r",
									"                        \"author\": \"Claire North\",\r",
									"                        \"year\": \"2014\",\r",
									"                        \"average_rating\": null\r",
									"                    },\r",
									"                    {\r",
									"                        \"id_book\": \"2761626\",\r",
									"                        \"title\": \"The Brass Verdict (Harry Bosch, #14; Mickey Haller, #2; Harry Bosch Universe, #18)\",\r",
									"                        \"author\": \"Michael Connelly\",\r",
									"                        \"year\": \"2008\",\r",
									"                        \"average_rating\": null\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        }, {\r",
									"            \"get_book_query\": \" \",\r",
									"            \"get_book_page\": \"1\",\r",
									"            \"get_book_status_code\": 404,\r",
									"            \"get_book_body\": {\r",
									"                \"status\": 404,\r",
									"                \"message\": \"Books not found!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"get_book_query\", currentData[\"get_book_query\"]);\r",
									"pm.environment.set(\"get_book_page\", currentData[\"get_book_page\"]);\r",
									"pm.environment.set(\"get_book_status_code\", currentData[\"get_book_status_code\"]);\r",
									"pm.environment.set(\"get_book_body\", currentData[\"get_book_body\"]);\r",
									"pm.environment.set(\"get_book\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95ab8225-59cb-439d-b303-180bc2cbe449",
								"exec": [
									"data = pm.environment.get(\"get_book\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Search Book by Query (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"get_book_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"get_book_body\"));\r",
									"    // if(pm.variables.get(\"get_book_body\").books!=null){\r",
									"    //     pm.expect(jsonData).to.eql(pm.variables.get(\"get_book_body\"));\r",
									"    // }\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"get_book\");\r",
									"    pm.environment.unset(\"get_book_query\");\r",
									"    pm.environment.unset(\"get_book_page\");\r",
									"    pm.environment.unset(\"get_book_status_code\");\r",
									"    pm.environment.unset(\"get_book_body\");\r",
									"    pm.environment.unset(\"get_book_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"type": "text",
								"value": "{{get_book_jwt}}"
							}
						],
						"url": {
							"raw": "{{url}}/search/?query={{get_book_query}}&page={{get_book_page}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"search",
								""
							],
							"query": [
								{
									"key": "query",
									"value": "{{get_book_query}}"
								},
								{
									"key": "page",
									"value": "{{get_book_page}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bookmark Testing",
			"item": [
				{
					"name": "Create Bookmark Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "18dfe011-f9b1-4c6b-b714-0f35a52cfb2b",
								"exec": [
									"data = pm.environment.get(\"create_bookmark\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"create_bookmark_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"create_bookmark_id_book\" : \"9999999\",\r",
									"            \"create_bookmark_page_number\" : \"10\",\r",
									"            \"create_bookmark_note\" : \"Notes\",\r",
									"            \"create_bookmark_status_code\": 404,\r",
									"            \"create_bookmark_body\" : {\r",
									"                \"status\" : 404,\r",
									"                \"message\" : \"Book not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_bookmark_id_book\" : \"1\",\r",
									"            \"create_bookmark_page_number\" : \"10\",\r",
									"            \"create_bookmark_note\" : \"Notes\",\r",
									"            \"create_bookmark_status_code\": 200,\r",
									"            \"create_bookmark_body\" : {\r",
									"                \"status\" : 200,\r",
									"                \"message\" : \"Bookmark for book with id 1 created!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_bookmark_id_book\" : \"1\",\r",
									"            \"create_bookmark_page_number\" : \"10\",\r",
									"            \"create_bookmark_note\" : \"Notes\",\r",
									"            \"create_bookmark_status_code\": 400,\r",
									"            \"create_bookmark_body\" : {\r",
									"                \"status\" : 400,\r",
									"                \"message\" : \"You have bookmark this book!\"\r",
									"            }\r",
									"        },{\r",
									"            \"create_bookmark_id_book\" : \"1\",\r",
									"            \"create_bookmark_page_number\" : \"10\",\r",
									"            \"create_bookmark_note\" : \"\",\r",
									"            \"create_bookmark_status_code\": 400,\r",
									"            \"create_bookmark_body\" : {\r",
									"                \"status\" : 400,\r",
									"                \"message\" : \"Required field is not filled!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"create_bookmark_id_book\", currentData[\"create_bookmark_id_book\"]);\r",
									"pm.environment.set(\"create_bookmark_page_number\", currentData[\"create_bookmark_page_number\"]);\r",
									"pm.environment.set(\"create_bookmark_note\", currentData[\"create_bookmark_note\"]);\r",
									"pm.environment.set(\"create_bookmark_status_code\", currentData[\"create_bookmark_status_code\"]);\r",
									"pm.environment.set(\"create_bookmark_body\", currentData[\"create_bookmark_body\"]);\r",
									"pm.environment.set(\"create_bookmark\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "886ef907-6f1c-4ff6-8f5a-fcff926de65c",
								"exec": [
									"data = pm.environment.get(\"create_bookmark\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Create Bookmark\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Create Bookmark\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"create_bookmark_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"create_bookmark_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"create_bookmark\");\r",
									"    pm.environment.unset(\"create_bookmark_id_book\");\r",
									"    pm.environment.unset(\"create_bookmark_page_number\");\r",
									"    pm.environment.unset(\"create_bookmark_notes\");\r",
									"    pm.environment.unset(\"create_bookmark_status_code\");\r",
									"    pm.environment.unset(\"create_bookmark_body\");\r",
									"    pm.environment.unset(\"create_bookmark_jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{create_review_jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "page_number",
									"value": "{{create_bookmark_page_number}}",
									"type": "text"
								},
								{
									"key": "note",
									"value": "{{create_bookmark_note}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookmark/{{create_bookmark_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"{{create_bookmark_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bookmark Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae330325-0194-448a-9249-1533a2a5a75e",
								"exec": [
									"data = pm.environment.get(\"get_bookmark\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"get_bookmark_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"get_bookmark_id_book\" : \"\",\r",
									"            \"get_bookmark_status_code\" : 404,\r",
									"            \"get_bookmark_body\" : {\r",
									"                \"status\" : 404,\r",
									"                \"message\": \"Book not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"get_bookmark_id_book\" : \"1\",\r",
									"            \"get_bookmark_status_code\" : 200,\r",
									"            \"get_bookmark_body\" : {\r",
									"                \"status\" : 200,\r",
									"                \"bookmark\": {\r",
									"                    \"id_book\" : 1,\r",
									"                    \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                    \"author\": \"J.K. Rowling\",\r",
									"                    \"year\": \"2006\",\r",
									"                    \"page_number\": 10,\r",
									"                    \"note\": \"Notes\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"get_bookmark_id_book\", currentData[\"get_bookmark_id_book\"]);\r",
									"pm.environment.set(\"get_bookmark_status_code\", currentData[\"get_bookmark_status_code\"]);\r",
									"pm.environment.set(\"get_bookmark_body\", currentData[\"get_bookmark_body\"]);\r",
									"pm.environment.set(\"get_bookmark\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6e2e54bf-acb1-4820-a114-bb64b73b16f3",
								"exec": [
									"data = pm.environment.get(\"get_bookmark\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Get Bookmark\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Get Bookmark\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"get_bookmark_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"get_bookmark_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"get_bookmark\");\r",
									"    pm.environment.unset(\"get_bookmark_id_book\");\r",
									"    pm.environment.unset(\"get_bookmark_status_code\");\r",
									"    pm.environment.unset(\"get_bookmark_body\");\r",
									"    pm.environment.unset(\"get_bookmark_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{get_bookmark_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/bookmark/{{get_bookmark_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"{{get_bookmark_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Bookmark Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "be0105de-e3a4-4701-b160-560cfe122e8e",
								"exec": [
									"data = pm.environment.get(\"update_bookmark\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"update_bookmark_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"update_bookmark_id_book\" : \"9999999\",\r",
									"            \"update_bookmark_page_number\" : \"10\",\r",
									"            \"update_bookmark_note\" : \"Notes\",\r",
									"            \"update_bookmark_status_code\" : 404,\r",
									"            \"update_bookmark_body\" : {\r",
									"                \"status\" : 404,\r",
									"                \"message\" : \"Book not found!\"\r",
									"            }\r",
									"        },{\r",
									"            \"update_bookmark_id_book\" : \"1\",\r",
									"            \"update_bookmark_page_number\" : \"11\",\r",
									"            \"update_bookmark_note\" : \"note update\",\r",
									"            \"update_bookmark_status_code\" : 200,\r",
									"            \"update_bookmark_body\" : {\r",
									"                \"status\" : 200,\r",
									"                \"message\" : \"Bookmark updated!\"\r",
									"            }\r",
									"        },{\r",
									"            \"update_bookmark_id_book\" : \"1\",\r",
									"            \"update_bookmark_page_number\" : \"\",\r",
									"            \"update_bookmark_note\" : \"\",\r",
									"            \"update_bookmark_status_code\" : 400,\r",
									"            \"update_bookmark_body\" : {\r",
									"                \"status\" : 400,\r",
									"                \"message\" : \"Required field is not filled!\"\r",
									"            }\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"update_bookmark_id_book\", currentData[\"update_bookmark_id_book\"]);\r",
									"pm.environment.set(\"update_bookmark_page_number\", currentData[\"update_bookmark_page_number\"]);\r",
									"pm.environment.set(\"update_bookmark_note\", currentData[\"update_bookmark_note\"]);\r",
									"pm.environment.set(\"update_bookmark_status_code\", currentData[\"update_bookmark_status_code\"]);\r",
									"pm.environment.set(\"update_bookmark_body\", currentData[\"update_bookmark_body\"]);\r",
									"pm.environment.set(\"update_bookmark\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "444868fd-f4c0-4d30-93ab-52b8b9822a52",
								"exec": [
									"data = pm.environment.get(\"update_bookmark\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Update Bookmark\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Update Bookmark\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"update_bookmark_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"update_bookmark_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"update_bookmark\");\r",
									"    pm.environment.unset(\"update_bookmark_id_book\");\r",
									"    pm.environment.unset(\"update_bookmark_page_number\");\r",
									"    pm.environment.unset(\"update_bookmark_note\");\r",
									"    pm.environment.unset(\"update_bookmark_status_code\");\r",
									"    pm.environment.unset(\"update_bookmark_body\");\r",
									"    pm.environment.unset(\"update_bookmark_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{update_bookmark_jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "page_number",
									"value": "{{update_bookmark_page_number}}",
									"type": "text"
								},
								{
									"key": "note",
									"value": "{{update_bookmark_note}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookmark/{{update_bookmark_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"{{update_bookmark_id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bookmark Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2aa60bc5-7864-4f08-b51e-99799167996c",
								"exec": [
									"data = pm.environment.get(\"delete_bookmark\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"delete_bookmark_jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"delete_bookmark_id_book\" : \"9999999\",\r",
									"            \"delete_bookmark_status_code\" : 400,\r",
									"            \"delete_bookmark_body\" : {\r",
									"                \"status\" : 400,\r",
									"                \"message\" : \"Book not found!\"\r",
									"            } \r",
									"        },{\r",
									"            \"delete_bookmark_id_book\" : \"1\",\r",
									"            \"delete_bookmark_status_code\" : 200,\r",
									"            \"delete_bookmark_body\" : {\r",
									"                \"status\" : 200,\r",
									"                \"message\" : \"Bookmark deleted!\"\r",
									"            } \r",
									"        },{\r",
									"            \"delete_bookmark_id_book\" : \"31\",\r",
									"            \"delete_bookmark_status_code\" : 404,\r",
									"            \"delete_bookmark_body\" : {\r",
									"                \"status\" : 404,\r",
									"                \"message\" : \"Bookmark not found!\"\r",
									"            } \r",
									"        }\r",
									"    ]\r",
									"}\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"delete_bookmark_id_book\", currentData[\"delete_bookmark_id_book\"]);\r",
									"pm.environment.set(\"delete_bookmark_status_code\", currentData[\"delete_bookmark_status_code\"]);\r",
									"pm.environment.set(\"delete_bookmark_body\", currentData[\"delete_bookmark_body\"]);\r",
									"pm.environment.set(\"delete_bookmark\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "23a57af8-6bec-413b-9b06-0faf223a2e9f",
								"exec": [
									"data = pm.environment.get(\"delete_bookmark\");\r",
									"flag=false;\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Delete Bookmark\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Delete Bookmark\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"delete_bookmark_status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"delete_bookmark_body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"delete_bookmark\");\r",
									"    pm.environment.unset(\"delete_bookmark_id_book\");\r",
									"    pm.environment.unset(\"delete_bookmark_status_code\");\r",
									"    pm.environment.unset(\"delete_bookmark_body\");\r",
									"    pm.environment.unset(\"delete_bookmark_jwt\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{delete_bookmark_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/bookmark/{{delete_bookmark_id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookmark",
								"{{delete_bookmark_id_book}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bookshelf Testing",
			"item": [
				{
					"name": "Insert Bookshelf (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "73e139a6-7ecc-4f6e-a94e-0a5fcc339b95",
								"exec": [
									"data = pm.environment.get(\"bookshelf_insert\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_book\" : \"9999999\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Book not found!\"\r",
									"        },{\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Success insert book with id 1 to your bookshelf!\"\r",
									"        },{\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"This book has already in your bookshelf\"\r",
									"        },{\r",
									"            \"id_book\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_book\", currentData[\"id_book\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"bookshelf_insert\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "461f4cd5-4493-4a53-bdbb-f0e8ef33a64b",
								"exec": [
									"data = pm.environment.get(\"bookshelf_insert\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Insert Bookshelf (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Get User Bookshelf (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"bookshelf_insert\");\r",
									"    pm.environment.unset(\"id_book\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "book_id",
									"value": "{{id_book}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookshelf/insert",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"insert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Bookshelf (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "42bff951-cb11-4062-9407-d0e8b8aac285",
								"exec": [
									"data = pm.environment.get(\"bookshelf_get\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"id\" : 1,\r",
									"                    \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                    \"publication_year\": \"2006\",\r",
									"                    \"publisher\": \"Scholastic Inc.\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\" : 2,\r",
									"                    \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                    \"publication_year\" : \"2004\",\r",
									"                    \"publisher\" : \"Scholastic Inc.\"\r",
									"                }\r",
									"            ]\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Your bookshelf is empty\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"bookshelf_get\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca29c65e-e0a7-4ba8-a5d1-cef3a78e4b1c",
								"exec": [
									"data = pm.environment.get(\"bookshelf_get\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Get User Bookshelf (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Search User's Bookshelf (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"bookshelf_get\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/bookshelf/",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User's Bookshelf (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36356b03-959c-4efb-9347-b5eebb83fc3e",
								"exec": [
									"data = pm.environment.get(\"bookshelf_search\");\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"username\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields\"\r",
									"        },{\r",
									"            \"username\" : \"lololol\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Username not found\"\r",
									"        },{\r",
									"            \"username\" : \"u2\",\r",
									"            \"status_code\": 423,\r",
									"            \"body\" : \"Sorry, his/her bookshelf is private\"\r",
									"        },{\r",
									"            \"username\" : \"u1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"His/her bookshelf is empty\"\r",
									"        },{\r",
									"            \"username\" : \"u1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"id\" : 1,\r",
									"                    \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                    \"publication_year\": \"2006\",\r",
									"                    \"publisher\": \"Scholastic Inc.\"\r",
									"                },\r",
									"                {\r",
									"                    \"id\" : 2,\r",
									"                    \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                    \"publication_year\" : \"2004\",\r",
									"                    \"publisher\" : \"Scholastic Inc.\"\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"username\", currentData[\"username\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"bookshelf_search\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "863b3c00-6e39-45cb-9688-8f91657988da",
								"exec": [
									"data = pm.environment.get(\"bookshelf_search\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Search User's Bookshelf (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Change Bookshelf Privacy (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"bookshelf_search\");\r",
									"    pm.environment.unset(\"username\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/bookshelf/search/{{username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"search",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Bookshelf Privacy (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4ba49dfb-1386-4133-be6f-e88041ead754",
								"exec": [
									"data = pm.environment.get(\"bookshelf_change_privacy\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"You're not allowed to access this resource\"\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Change privacy success!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"bookshelf_change_privacy\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f8fb883-34c8-4ba3-951a-236346a20aa4",
								"exec": [
									"data = pm.environment.get(\"bookshelf_change_privacy\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Change Bookshelf Privacy (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Delete Bookshelf (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"bookshelf_change_privacy\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/bookshelf/changePrivacy",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"changePrivacy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bookshelf (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bf4ca6a9-4138-41a1-a081-41f959f21880",
								"exec": [
									"data = pm.environment.get(\"bookshelf_delete\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Book with id 1 has deleted from your bookshelf\"\r",
									"        },{\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Book with id 1 is not in your bookshelf\"\r",
									"        },{\r",
									"            \"id_book\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_book\", currentData[\"id_book\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"bookshelf_delete\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6d7e2352-eefe-49e9-9559-2763e53d4ecc",
								"exec": [
									"data = pm.environment.get(\"bookshelf_delete\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Delete Bookshelf (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"bookshelf_delete\");\r",
									"    pm.environment.unset(\"id_book\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "book_id",
									"value": "{{id_book}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/bookshelf/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"bookshelf",
								"delete"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Playlist Testing",
			"item": [
				{
					"name": "Create Playlist (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8739ca70-d4d3-4aad-ac8c-51ce7940720b",
								"exec": [
									"data = pm.environment.get(\"playlist_create\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"name\" : \"Coba Playlist 1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"New Playlist Created\"\r",
									"        },{\r",
									"            \"name\" : \"Coba Playlist 3\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"You already have 2 playlists, please upgrade your account\"\r",
									"        },{\r",
									"            \"name\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"name\", currentData[\"name\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_create\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e287b5f2-fea6-4c7a-b925-5923acf903d2",
								"exec": [
									"data = pm.environment.get(\"playlist_create\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Create Playlist (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Insert Book (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_create\");\r",
									"    pm.environment.unset(\"name\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/create",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert Book (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3271c1e0-4117-49ba-860b-e787fbf74503",
								"exec": [
									"data = pm.environment.get(\"playlist_insert\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_playlist\" : \"PL999\",\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Playlist not found!\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"id_book\" : \"9999\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Book not found!\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Success insert book with id 1 to your playlist\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"This book is already in your playlist\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"\",\r",
									"            \"id_book\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_playlist\", currentData[\"id_playlist\"]);\r",
									"pm.environment.set(\"id_book\", currentData[\"id_book\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_insert\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "33e02d49-adb9-4af7-926c-a867ebff13e9",
								"exec": [
									"data = pm.environment.get(\"playlist_insert\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Insert Book (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Show user's playlist (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_insert\");\r",
									"    pm.environment.unset(\"id_playlist\");\r",
									"    pm.environment.unset(\"id_book\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "{{id_playlist}}",
									"type": "text"
								},
								{
									"key": "book_id",
									"value": "{{id_book}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/insert",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"insert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show user's playlist (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c10c7a2c-c585-4dda-9be8-874612148233",
								"exec": [
									"data = pm.environment.get(\"playlist_show\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Your playlist is empty\"\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_show\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "07bdce92-0f97-4fb2-984c-6ba13a41364d",
								"exec": [
									"data = pm.environment.get(\"playlist_show\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Show user's playlist (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Search Playlist by Username (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_create\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/playlist",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Playlist by Username (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "03a01a13-0316-462b-8e90-b3aab1022c5d",
								"exec": [
									"data = pm.environment.get(\"playlist_search_user\");\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"status_code\": 400,\r",
									"            \"username\" : \"\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : \"Fill all of the available fields\"\r",
									"        },{\r",
									"            \"status_code\": 404,\r",
									"            \"username\" : \"lololol\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : \"User not found!\"\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"username\" : \"u2\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : \"His/her doesn't has playlist\"\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"username\" : \"u1\",\r",
									"            \"orderby\" : \"\",\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                }\r",
									"            ]\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"username\" : \"u1\",\r",
									"            \"orderby\" : \"name\",\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                }\r",
									"            ]\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"username\" : \"u1\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                },{\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"username\", currentData[\"username\"]);\r",
									"pm.environment.set(\"orderby\", currentData[\"orderby\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_search_user\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "03108c3a-1813-44c3-9a4b-5fbd1a4b99c0",
								"exec": [
									"data = pm.environment.get(\"playlist_search_user\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Search Playlist by Username (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Search Playlist by Playlist's Name (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_search_user\");\r",
									"    pm.environment.unset(\"username\");\r",
									"    pm.environment.unset(\"orderby\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/playlist/search/user/{{username}}?sort={{orderby}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"search",
								"user",
								"{{username}}"
							],
							"query": [
								{
									"key": "sort",
									"value": "{{orderby}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Playlist by Playlist's Name (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c709ffd7-47fa-4ae9-b4e4-1e9fe907b045",
								"exec": [
									"data = pm.environment.get(\"playlist_search_name\");\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"status_code\": 400,\r",
									"            \"name\" : \"\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : \"Fill all of the available fields\"\r",
									"        },{\r",
									"            \"status_code\": 404,\r",
									"            \"name\" : \"lololol\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : \"Playlist not found!\"\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"name\" : \"play\",\r",
									"            \"orderby\" : \"\",\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                }\r",
									"            ]\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"name\" : \"play\",\r",
									"            \"orderby\" : \"name\",\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                }\r",
									"            ]\r",
									"        },{\r",
									"            \"status_code\": 200,\r",
									"            \"name\" : \"play\",\r",
									"            \"orderby\" : \"date\",\r",
									"            \"body\" : [\r",
									"                {\r",
									"                    \"name\" : \"Coba Playlist 2\",\r",
									"                    \"created_date\" : \"24/02/2020 15:30\",\r",
									"                    \"modified_date\" : \"01/03/2020 01:23\",\r",
									"                    \"books\" : []\r",
									"                },{\r",
									"                    \"name\" : \"Coba Playlist 1\",\r",
									"                    \"created_date\" : \"23/02/2020 12:34\",\r",
									"                    \"modified_date\" : \"24/02/2020 10:10\",\r",
									"                    \"books\" : [\r",
									"                        {\r",
									"                            \"id\" : 1,\r",
									"                            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter, #6)\",\r",
									"                            \"publication_year\": \"2006\",\r",
									"                            \"publisher\": \"Scholastic Inc.\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"id\" : 2,\r",
									"                            \"title\" : \"Harry Potter and the Order of the Phoenix (Harry Potter, #5)\",\r",
									"                            \"publication_year\" : \"2004\",\r",
									"                            \"publisher\" : \"Scholastic Inc.\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"name\", currentData[\"name\"]);\r",
									"pm.environment.set(\"orderby\", currentData[\"orderby\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_search_name\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "02f81896-3358-43d3-bc36-0f878fff6393",
								"exec": [
									"data = pm.environment.get(\"playlist_search_name\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Search Playlist by Playlist's Name (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Update Playlist's Name (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_search_name\");\r",
									"    pm.environment.unset(\"username\");\r",
									"    pm.environment.unset(\"orderby\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/playlist/search/name/{{name}}?sort={{orderby}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"search",
								"name",
								"{{name}}"
							],
							"query": [
								{
									"key": "sort",
									"value": "{{orderby}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Playlist's Name (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e7f3fc8b-b6ed-44fa-9575-284820aa5f78",
								"exec": [
									"data = pm.environment.get(\"playlist_change_name\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_playlist\" : \"PL999\",\r",
									"            \"name\" : \"Coba Ganti\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Playlist not found!\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"id_book\" : \"Coba Ganti\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Playlist's name is already change to 'Coba Ganti'\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"\",\r",
									"            \"name\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_playlist\", currentData[\"id_playlist\"]);\r",
									"pm.environment.set(\"name\", currentData[\"name\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_change_name\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1707eb1c-9849-4b4b-870b-2a27abcca5f7",
								"exec": [
									"data = pm.environment.get(\"playlist_change_name\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Update Playlist's Name (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Update Privacy Playlist (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_change_name\");\r",
									"    pm.environment.unset(\"id_playlist\");\r",
									"    pm.environment.unset(\"name\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "{{id_playlist}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/changeName",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"changeName"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Privacy Playlist (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ddd5bafd-0dec-4262-89c8-f4c7af2df556",
								"exec": [
									"data = pm.environment.get(\"playlist_change_privacy\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_playlist\" : \"PL999\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Playlist not found!\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Change privacy success\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_playlist\", currentData[\"id_playlist\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_change_privacy\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "742bd731-3bde-441c-b0f9-af65cdfc63cf",
								"exec": [
									"data = pm.environment.get(\"playlist_change_privacy\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Update Privacy Playlist (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Remove Book From Playlist (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_change_privacy\");\r",
									"    pm.environment.unset(\"id_playlist\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "{{id_playlist}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/changePrivacy",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"changePrivacy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Book From Playlist (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7dcf674f-0dce-4b1e-8fbc-33832d11542d",
								"exec": [
									"data = pm.environment.get(\"playlist_remove_book\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_playlist\" : \"PL999\",\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Playlist not found!\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"id_book\" : \"999999\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Book with id 999999 is not in your playlist\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"id_book\" : \"1\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Book with id 1 has deleted from your playlist\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"\",\r",
									"            \"id_book\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_playlist\", currentData[\"id_playlist\"]);\r",
									"pm.environment.set(\"id_book\", currentData[\"id_book\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_remove_book\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6949a63d-a248-4392-9482-5c988c6406d3",
								"exec": [
									"data = pm.environment.get(\"playlist_remove_book\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Remove Book From Playlsit (Testing)\");\r",
									"}else{\r",
									"    postman.setNextRequest(\"Delete Playlist (Testing)\");\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_remove_book\");\r",
									"    pm.environment.unset(\"id_playlist\");\r",
									"    pm.environment.unset(\"id_book\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "{{id_playlist}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/delete/book/{{id_book}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"delete",
								"book",
								"{{id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Playlist (Testing)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "31775b78-0ef5-4452-b967-0346c0e88f0f",
								"exec": [
									"data = pm.environment.get(\"playlist_delete\");\r",
									"url = pm.environment.get(\"url\")+'/user/login';\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"            {key: \"username\", value: \"u1\", disabled:false},\r",
									"            {key: \"password\", value: \"1\", disabled:false},\r",
									"        ]\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.environment.set(\"jwt\", response.json().token);\r",
									"});\r",
									"\r",
									"if(!data || data.length<=0){\r",
									"    data = [\r",
									"        {\r",
									"            \"id_playlist\" : \"PL999\",\r",
									"            \"status_code\": 404,\r",
									"            \"body\" : \"Playlist not found!\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"PL001\",\r",
									"            \"status_code\": 200,\r",
									"            \"body\" : \"Playlist with id PL001 has been deleted\"\r",
									"        },{\r",
									"            \"id_playlist\" : \"\",\r",
									"            \"status_code\": 400,\r",
									"            \"body\" : \"Fill all of the available fields!\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"let currentData = data.shift();\r",
									"pm.environment.set(\"id_playlist\", currentData[\"id_playlist\"]);\r",
									"pm.environment.set(\"status_code\", currentData[\"status_code\"]);\r",
									"pm.environment.set(\"body\", currentData[\"body\"]);\r",
									"pm.environment.set(\"playlist_delete\", data);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "98e01e71-7eba-4b15-ac83-1422a0809685",
								"exec": [
									"data = pm.environment.get(\"playlist_delete\");\r",
									"flag=false;\r",
									"\r",
									"if (data && data.length > 0){\r",
									"    postman.setNextRequest(\"Remove Book From Playlsit (Testing)\");\r",
									"}else{\r",
									"    flag = true;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"status_code\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Returned data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(pm.variables.get(\"body\"));\r",
									"});\r",
									"\r",
									"if(flag){\r",
									"    pm.environment.unset(\"playlist_delete\");\r",
									"    pm.environment.unset(\"id_playlist\");\r",
									"    pm.environment.unset(\"status_code\");\r",
									"    pm.environment.unset(\"body\");\r",
									"    pm.environment.unset(\"jwt\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "playlist_id",
									"value": "{{id_playlist}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/playlist/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"playlist",
								"delete"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}